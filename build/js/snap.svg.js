!function(t){var e,n,r="0.4.2",i="hasOwnProperty",o=/[\.\/]/,a=/\s*,\s*/,s="*",u=function(t,e){return t-e},l={n:{}},c=function(){for(var t=0,e=this.length;e>t;t++)if("undefined"!=typeof this[t])return this[t]},f=function(){for(var t=this.length;--t;)if("undefined"!=typeof this[t])return this[t]},h=function(t,r){t=String(t);var i,o=n,a=Array.prototype.slice.call(arguments,2),s=h.listeners(t),l=0,d=[],p={},g=[],v=e;g.firstDefined=c,g.lastDefined=f,e=t,n=0;for(var m=0,y=s.length;y>m;m++)"zIndex"in s[m]&&(d.push(s[m].zIndex),s[m].zIndex<0&&(p[s[m].zIndex]=s[m]));for(d.sort(u);d[l]<0;)if(i=p[d[l++]],g.push(i.apply(r,a)),n)return n=o,g;for(m=0;y>m;m++)if(i=s[m],"zIndex"in i)if(i.zIndex==d[l]){if(g.push(i.apply(r,a)),n)break;do if(l++,i=p[d[l]],i&&g.push(i.apply(r,a)),n)break;while(i)}else p[i.zIndex]=i;else if(g.push(i.apply(r,a)),n)break;return n=o,e=v,g};h._events=l,h.listeners=function(t){var e,n,r,i,a,u,c,f,h=t.split(o),d=l,p=[d],g=[];for(i=0,a=h.length;a>i;i++){for(f=[],u=0,c=p.length;c>u;u++)for(d=p[u].n,n=[d[h[i]],d[s]],r=2;r--;)e=n[r],e&&(f.push(e),g=g.concat(e.f||[]));p=f}return g},h.on=function(t,e){if(t=String(t),"function"!=typeof e)return function(){};for(var n=t.split(a),r=0,i=n.length;i>r;r++)!function(t){for(var n,r=t.split(o),i=l,a=0,s=r.length;s>a;a++)i=i.n,i=i.hasOwnProperty(r[a])&&i[r[a]]||(i[r[a]]={n:{}});for(i.f=i.f||[],a=0,s=i.f.length;s>a;a++)if(i.f[a]==e){n=!0;break}!n&&i.f.push(e)}(n[r]);return function(t){+t==+t&&(e.zIndex=+t)}},h.f=function(t){var e=[].slice.call(arguments,1);return function(){h.apply(null,[t,null].concat(e).concat([].slice.call(arguments,0)))}},h.stop=function(){n=1},h.nt=function(t){return t?new RegExp("(?:\\.|\\/|^)"+t+"(?:\\.|\\/|$)").test(e):e},h.nts=function(){return e.split(o)},h.off=h.unbind=function(t,e){if(!t)return void(h._events=l={n:{}});var n=t.split(a);if(n.length>1)for(var r=0,u=n.length;u>r;r++)h.off(n[r],e);else{n=t.split(o);var c,f,d,r,u,p,g,v=[l];for(r=0,u=n.length;u>r;r++)for(p=0;p<v.length;p+=d.length-2){if(d=[p,1],c=v[p].n,n[r]!=s)c[n[r]]&&d.push(c[n[r]]);else for(f in c)c[i](f)&&d.push(c[f]);v.splice.apply(v,d)}for(r=0,u=v.length;u>r;r++)for(c=v[r];c.n;){if(e){if(c.f){for(p=0,g=c.f.length;g>p;p++)if(c.f[p]==e){c.f.splice(p,1);break}!c.f.length&&delete c.f}for(f in c.n)if(c.n[i](f)&&c.n[f].f){var m=c.n[f].f;for(p=0,g=m.length;g>p;p++)if(m[p]==e){m.splice(p,1);break}!m.length&&delete c.n[f].f}}else{delete c.f;for(f in c.n)c.n[i](f)&&c.n[f].f&&delete c.n[f].f}c=c.n}}},h.once=function(t,e){var n=function(){return h.unbind(t,n),e.apply(this,arguments)};return h.on(t,n)},h.version=r,h.toString=function(){return"You are running Eve "+r},"undefined"!=typeof module&&module.exports?module.exports=h:"function"==typeof define&&define.amd?define("eve",[],function(){return h}):t.eve=h}(this),function(t,e){if("function"==typeof define&&define.amd)define(["eve"],function(n){return e(t,n)});else if("undefined"!=typeof exports){var n=require("eve");module.exports=e(t,n)}else e(t,t.eve)}(window||this,function(t,e){var n=function(e){var n={},r=t.requestAnimationFrame||t.webkitRequestAnimationFrame||t.mozRequestAnimationFrame||t.oRequestAnimationFrame||t.msRequestAnimationFrame||function(t){setTimeout(t,16)},i=Array.isArray||function(t){return t instanceof Array||"[object Array]"==Object.prototype.toString.call(t)},o=0,a="M"+(+new Date).toString(36),s=function(){return a+(o++).toString(36)},u=Date.now||function(){return+new Date},l=function(t){var e=this;if(null==t)return e.s;var n=e.s-t;e.b+=e.dur*n,e.B+=e.dur*n,e.s=t},c=function(t){var e=this;return null==t?e.spd:void(e.spd=t)},f=function(t){var e=this;return null==t?e.dur:(e.s=e.s*t/e.dur,void(e.dur=t))},h=function(){var t=this;delete n[t.id],t.update(),e("mina.stop."+t.id,t)},d=function(){var t=this;t.pdif||(delete n[t.id],t.update(),t.pdif=t.get()-t.b)},p=function(){var t=this;t.pdif&&(t.b=t.get()-t.pdif,delete t.pdif,n[t.id]=t)},g=function(){var t,e=this;if(i(e.start)){t=[];for(var n=0,r=e.start.length;r>n;n++)t[n]=+e.start[n]+(e.end[n]-e.start[n])*e.easing(e.s)}else t=+e.start+(e.end-e.start)*e.easing(e.s);e.set(t)},v=function(){var t=0;for(var i in n)if(n.hasOwnProperty(i)){var o=n[i],a=o.get();t++,o.s=(a-o.b)/(o.dur/o.spd),o.s>=1&&(delete n[i],o.s=1,t--,function(t){setTimeout(function(){e("mina.finish."+t.id,t)})}(o)),o.update()}t&&r(v)},m=function(t,e,i,o,a,u,y){var x={id:s(),start:t,end:e,b:i,s:0,dur:o-i,spd:1,get:a,set:u,easing:y||m.linear,status:l,speed:c,duration:f,stop:h,pause:d,resume:p,update:g};n[x.id]=x;var b,w=0;for(b in n)if(n.hasOwnProperty(b)&&(w++,2==w))break;return 1==w&&r(v),x};return m.time=u,m.getById=function(t){return n[t]||null},m.linear=function(t){return t},m.easeout=function(t){return Math.pow(t,1.7)},m.easein=function(t){return Math.pow(t,.48)},m.easeinout=function(t){if(1==t)return 1;if(0==t)return 0;var e=.48-t/1.04,n=Math.sqrt(.1734+e*e),r=n-e,i=Math.pow(Math.abs(r),1/3)*(0>r?-1:1),o=-n-e,a=Math.pow(Math.abs(o),1/3)*(0>o?-1:1),s=i+a+.5;return 3*(1-s)*s*s+s*s*s},m.backin=function(t){if(1==t)return 1;var e=1.70158;return t*t*((e+1)*t-e)},m.backout=function(t){if(0==t)return 0;t-=1;var e=1.70158;return t*t*((e+1)*t+e)+1},m.elastic=function(t){return t==!!t?t:Math.pow(2,-10*t)*Math.sin((t-.075)*(2*Math.PI)/.3)+1},m.bounce=function(t){var e,n=7.5625,r=2.75;return 1/r>t?e=n*t*t:2/r>t?(t-=1.5/r,e=n*t*t+.75):2.5/r>t?(t-=2.25/r,e=n*t*t+.9375):(t-=2.625/r,e=n*t*t+.984375),e},t.mina=m,m}("undefined"==typeof e?function(){}:e),r=function(t){function n(t,e){if(t){if(t.nodeType)return S(t);if(i(t,"array")&&n.set)return n.set.apply(n,t);if(t instanceof y)return t;if(null==e)return t=k.doc.querySelector(String(t)),S(t)}return t=null==t?"100%":t,e=null==e?"100%":e,new w(t,e)}function r(t,e){if(e){if("#text"==t&&(t=k.doc.createTextNode(e.text||e["#text"]||"")),"#comment"==t&&(t=k.doc.createComment(e.text||e["#text"]||"")),"string"==typeof t&&(t=r(t)),"string"==typeof e)return 1==t.nodeType?"xlink:"==e.substring(0,6)?t.getAttributeNS(X,e.substring(6)):"xml:"==e.substring(0,4)?t.getAttributeNS($,e.substring(4)):t.getAttribute(e):"text"==e?t.nodeValue:null;if(1==t.nodeType){for(var n in e)if(e[_](n)){var i=B(e[n]);i?"xlink:"==n.substring(0,6)?t.setAttributeNS(X,n.substring(6),i):"xml:"==n.substring(0,4)?t.setAttributeNS($,n.substring(4),i):t.setAttribute(n,i):t.removeAttribute(n)}}else"text"in e&&(t.nodeValue=e.text)}else t=k.doc.createElementNS($,t);return t}function i(t,e){return e=B.prototype.toLowerCase.call(e),"finite"==e?isFinite(t):"array"==e&&(t instanceof Array||Array.isArray&&Array.isArray(t))?!0:"null"==e&&null===t||e==typeof t&&null!==t||"object"==e&&t===Object(t)||q.call(t).slice(8,-1).toLowerCase()==e}function o(t){if("function"==typeof t||Object(t)!==t)return t;var e=new t.constructor;for(var n in t)t[_](n)&&(e[n]=o(t[n]));return e}function a(t,e){for(var n=0,r=t.length;r>n;n++)if(t[n]===e)return t.push(t.splice(n,1)[0])}function s(t,e,n){function r(){var i=Array.prototype.slice.call(arguments,0),o=i.join("␀"),s=r.cache=r.cache||{},u=r.count=r.count||[];return s[_](o)?(a(u,o),n?n(s[o]):s[o]):(u.length>=1e3&&delete s[u.shift()],u.push(o),s[o]=t.apply(e,i),n?n(s[o]):s[o])}return r}function u(t,e,n,r,i,o){if(null==i){var a=t-n,s=e-r;return a||s?(180+180*F.atan2(-s,-a)/P+360)%360:0}return u(t,e,i,o)-u(n,r,i,o)}function l(t){return t%360*P/180}function c(t){return 180*t/P%360}function f(t){var e=[];return t=t.replace(/(?:^|\s)(\w+)\(([^)]+)\)/g,function(t,n,r){return r=r.split(/\s*,\s*|\s+/),"rotate"==n&&1==r.length&&r.push(0,0),"scale"==n&&(r.length>2?r=r.slice(0,2):2==r.length&&r.push(0,0),1==r.length&&r.push(r[0],0,0)),"skewX"==n?e.push(["m",1,0,F.tan(l(r[0])),1,0,0]):"skewY"==n?e.push(["m",1,F.tan(l(r[0])),0,1,0,0]):e.push([n.charAt(0)].concat(r)),t}),e}function h(t,e){var r=tt(t),i=new n.Matrix;if(r)for(var o=0,a=r.length;a>o;o++){var s,u,l,c,f,h=r[o],d=h.length,p=B(h[0]).toLowerCase(),g=h[0]!=p,v=g?i.invert():0;"t"==p&&2==d?i.translate(h[1],0):"t"==p&&3==d?g?(s=v.x(0,0),u=v.y(0,0),l=v.x(h[1],h[2]),c=v.y(h[1],h[2]),i.translate(l-s,c-u)):i.translate(h[1],h[2]):"r"==p?2==d?(f=f||e,i.rotate(h[1],f.x+f.width/2,f.y+f.height/2)):4==d&&(g?(l=v.x(h[2],h[3]),c=v.y(h[2],h[3]),i.rotate(h[1],l,c)):i.rotate(h[1],h[2],h[3])):"s"==p?2==d||3==d?(f=f||e,i.scale(h[1],h[d-1],f.x+f.width/2,f.y+f.height/2)):4==d?g?(l=v.x(h[2],h[3]),c=v.y(h[2],h[3]),i.scale(h[1],h[1],l,c)):i.scale(h[1],h[1],h[2],h[3]):5==d&&(g?(l=v.x(h[3],h[4]),c=v.y(h[3],h[4]),i.scale(h[1],h[2],l,c)):i.scale(h[1],h[2],h[3],h[4])):"m"==p&&7==d&&i.add(h[1],h[2],h[3],h[4],h[5],h[6])}return i}function d(t){var e=t.node.ownerSVGElement&&S(t.node.ownerSVGElement)||t.node.parentNode&&S(t.node.parentNode)||n.select("svg")||n(0,0),r=e.select("defs"),i=null==r?!1:r.node;return i||(i=b("defs",e.node).node),i}function p(t){return t.node.ownerSVGElement&&S(t.node.ownerSVGElement)||n.select("svg")}function v(t,e,n){function i(t){if(null==t)return L;if(t==+t)return t;r(l,{width:t});try{return l.getBBox().width}catch(e){return 0}}function o(t){if(null==t)return L;if(t==+t)return t;r(l,{height:t});try{return l.getBBox().height}catch(e){return 0}}function a(r,i){null==e?u[r]=i(t.attr(r)||0):r==e&&(u=i(null==n?t.attr(r)||0:n))}var s=p(t).node,u={},l=s.querySelector(".svg---mgr");switch(l||(l=r("rect"),r(l,{x:-9e9,y:-9e9,width:10,height:10,"class":"svg---mgr",fill:"none"}),s.appendChild(l)),t.type){case"rect":a("rx",i),a("ry",o);case"image":a("width",i),a("height",o);case"text":a("x",i),a("y",o);break;case"circle":a("cx",i),a("cy",o),a("r",i);break;case"ellipse":a("cx",i),a("cy",o),a("rx",i),a("ry",o);break;case"line":a("x1",i),a("x2",i),a("y1",o),a("y2",o);break;case"marker":a("refX",i),a("markerWidth",i),a("refY",o),a("markerHeight",o);break;case"radialGradient":a("fx",i),a("fy",o);break;case"tspan":a("dx",i),a("dy",o);break;default:a(e,i)}return s.removeChild(l),u}function m(t){i(t,"array")||(t=Array.prototype.slice.call(arguments,0));for(var e=0,n=0,r=this.node;this[e];)delete this[e++];for(e=0;e<t.length;e++)"set"==t[e].type?t[e].forEach(function(t){r.appendChild(t.node)}):r.appendChild(t[e].node);var o=r.childNodes;for(e=0;e<o.length;e++)this[n++]=S(o[e]);return this}function y(t){if(t.snap in H)return H[t.snap];var e;try{e=t.ownerSVGElement}catch(n){}this.node=t,e&&(this.paper=new w(e)),this.type=t.tagName||t.nodeName;var r=this.id=U(this);if(this.anims={},this._={transform:[]},t.snap=r,H[r]=this,"g"==this.type&&(this.add=m),this.type in{g:1,mask:1,pattern:1,symbol:1})for(var i in w.prototype)w.prototype[_](i)&&(this[i]=w.prototype[i])}function x(t){this.node=t}function b(t,e){var n=r(t);e.appendChild(n);var i=S(n);return i}function w(t,e){var n,i,o,a=w.prototype;if(t&&"svg"==t.tagName){if(t.snap in H)return H[t.snap];var s=t.ownerDocument;n=new y(t),i=t.getElementsByTagName("desc")[0],o=t.getElementsByTagName("defs")[0],i||(i=r("desc"),i.appendChild(s.createTextNode("Created with Snap")),n.node.appendChild(i)),o||(o=r("defs"),n.node.appendChild(o)),n.defs=o;for(var u in a)a[_](u)&&(n[u]=a[u]);n.paper=n.root=n}else n=b("svg",k.doc.body),r(n.node,{height:e,version:1.1,width:t,xmlns:$});return n}function S(t){return t?t instanceof y||t instanceof x?t:t.tagName&&"svg"==t.tagName.toLowerCase()?new w(t):t.tagName&&"object"==t.tagName.toLowerCase()&&"image/svg+xml"==t.type?new w(t.contentDocument.getElementsByTagName("svg")[0]):new y(t):t}function C(t,e){for(var n=0,r=t.length;r>n;n++){var i={type:t[n].type,attr:t[n].attr()},o=t[n].children();e.push(i),o.length&&C(o,i.childNodes=[])}}n.version="0.4.0",n.toString=function(){return"Snap v"+this.version},n._={};var k={win:t.window,doc:t.window.document};n._.glob=k;var _="hasOwnProperty",B=String,T=parseFloat,A=parseInt,F=Math,M=F.max,N=F.min,j=F.abs,P=(F.pow,F.PI),L=(F.round,""),q=Object.prototype.toString,E=/^\s*((#[a-f\d]{6})|(#[a-f\d]{3})|rgba?\(\s*([\d\.]+%?\s*,\s*[\d\.]+%?\s*,\s*[\d\.]+%?(?:\s*,\s*[\d\.]+%?)?)\s*\)|hsba?\(\s*([\d\.]+(?:deg|\xb0|%)?\s*,\s*[\d\.]+%?\s*,\s*[\d\.]+(?:%?\s*,\s*[\d\.]+)?%?)\s*\)|hsla?\(\s*([\d\.]+(?:deg|\xb0|%)?\s*,\s*[\d\.]+%?\s*,\s*[\d\.]+(?:%?\s*,\s*[\d\.]+)?%?)\s*\))\s*$/i,V=(n._.separator=/[,\s]+/,/[\s]*,[\s]*/),O={hs:1,rg:1},G=/([a-z])[\s,]*((-?\d*\.?\d*(?:e[\-+]?\d+)?[\s]*,?[\s]*)+)/gi,D=/([rstm])[\s,]*((-?\d*\.?\d*(?:e[\-+]?\d+)?[\s]*,?[\s]*)+)/gi,R=/(-?\d*\.?\d*(?:e[\-+]?\\d+)?)[\s]*,?[\s]*/gi,z=0,I="S"+(+new Date).toString(36),U=function(t){return(t&&t.type?t.type:L)+I+(z++).toString(36)},X="http://www.w3.org/1999/xlink",$="http://www.w3.org/2000/svg",H={};n.url=function(t){return"url('#"+t+"')"};n._.$=r,n._.id=U,n.format=function(){var t=/\{([^\}]+)\}/g,e=/(?:(?:^|\.)(.+?)(?=\[|\.|$|\()|\[('|")(.+?)\2\])(\(\))?/g,n=function(t,n,r){var i=r;return n.replace(e,function(t,e,n,r,o){e=e||r,i&&(e in i&&(i=i[e]),"function"==typeof i&&o&&(i=i()))}),i=(null==i||i==r?t:i)+""};return function(e,r){return B(e).replace(t,function(t,e){return n(t,e,r)})}}(),n._.clone=o,n._.cacher=s,n.rad=l,n.deg=c,n.sin=function(t){return F.sin(n.rad(t))},n.tan=function(t){return F.tan(n.rad(t))},n.cos=function(t){return F.cos(n.rad(t))},n.asin=function(t){return n.deg(F.asin(t))},n.acos=function(t){return n.deg(F.acos(t))},n.atan=function(t){return n.deg(F.atan(t))},n.atan2=function(t){return n.deg(F.atan2(t))},n.angle=u,n.len=function(t,e,r,i){return Math.sqrt(n.len2(t,e,r,i))},n.len2=function(t,e,n,r){return(t-n)*(t-n)+(e-r)*(e-r)},n.closestPoint=function(t,e,n){function r(t){var r=t.x-e,i=t.y-n;return r*r+i*i}for(var i,o,a,s,u=t.node,l=u.getTotalLength(),c=l/u.pathSegList.numberOfItems*.125,f=1/0,h=0;l>=h;h+=c)(s=r(a=u.getPointAtLength(h)))<f&&(i=a,o=h,f=s);for(c*=.5;c>.5;){var d,p,g,v,m,y;(g=o-c)>=0&&(m=r(d=u.getPointAtLength(g)))<f?(i=d,o=g,f=m):(v=o+c)<=l&&(y=r(p=u.getPointAtLength(v)))<f?(i=p,o=v,f=y):c*=.5}return i={x:i.x,y:i.y,length:o,distance:Math.sqrt(f)}},n.is=i,n.snapTo=function(t,e,n){if(n=i(n,"finite")?n:10,i(t,"array")){for(var r=t.length;r--;)if(j(t[r]-e)<=n)return t[r]}else{t=+t;var o=e%t;if(n>o)return e-o;if(o>t-n)return e-o+t}return e},n.getRGB=s(function(t){if(!t||(t=B(t)).indexOf("-")+1)return{r:-1,g:-1,b:-1,hex:"none",error:1,toString:Q};if("none"==t)return{r:-1,g:-1,b:-1,hex:"none",toString:Q};if(!(O[_](t.toLowerCase().substring(0,2))||"#"==t.charAt())&&(t=Y(t)),!t)return{r:-1,g:-1,b:-1,hex:"none",error:1,toString:Q};var e,r,o,a,s,u,l=t.match(E);return l?(l[2]&&(o=A(l[2].substring(5),16),r=A(l[2].substring(3,5),16),e=A(l[2].substring(1,3),16)),l[3]&&(o=A((s=l[3].charAt(3))+s,16),r=A((s=l[3].charAt(2))+s,16),e=A((s=l[3].charAt(1))+s,16)),l[4]&&(u=l[4].split(V),e=T(u[0]),"%"==u[0].slice(-1)&&(e*=2.55),r=T(u[1]),"%"==u[1].slice(-1)&&(r*=2.55),o=T(u[2]),"%"==u[2].slice(-1)&&(o*=2.55),"rgba"==l[1].toLowerCase().slice(0,4)&&(a=T(u[3])),u[3]&&"%"==u[3].slice(-1)&&(a/=100)),l[5]?(u=l[5].split(V),e=T(u[0]),"%"==u[0].slice(-1)&&(e/=100),r=T(u[1]),"%"==u[1].slice(-1)&&(r/=100),o=T(u[2]),"%"==u[2].slice(-1)&&(o/=100),("deg"==u[0].slice(-3)||"°"==u[0].slice(-1))&&(e/=360),"hsba"==l[1].toLowerCase().slice(0,4)&&(a=T(u[3])),u[3]&&"%"==u[3].slice(-1)&&(a/=100),n.hsb2rgb(e,r,o,a)):l[6]?(u=l[6].split(V),e=T(u[0]),"%"==u[0].slice(-1)&&(e/=100),r=T(u[1]),"%"==u[1].slice(-1)&&(r/=100),o=T(u[2]),"%"==u[2].slice(-1)&&(o/=100),("deg"==u[0].slice(-3)||"°"==u[0].slice(-1))&&(e/=360),"hsla"==l[1].toLowerCase().slice(0,4)&&(a=T(u[3])),u[3]&&"%"==u[3].slice(-1)&&(a/=100),n.hsl2rgb(e,r,o,a)):(e=N(F.round(e),255),r=N(F.round(r),255),o=N(F.round(o),255),a=N(M(a,0),1),l={r:e,g:r,b:o,toString:Q},l.hex="#"+(16777216|o|r<<8|e<<16).toString(16).slice(1),l.opacity=i(a,"finite")?a:1,l)):{r:-1,g:-1,b:-1,hex:"none",error:1,toString:Q}},n),n.hsb=s(function(t,e,r){return n.hsb2rgb(t,e,r).hex}),n.hsl=s(function(t,e,r){return n.hsl2rgb(t,e,r).hex}),n.rgb=s(function(t,e,n,r){if(i(r,"finite")){var o=F.round;return"rgba("+[o(t),o(e),o(n),+r.toFixed(2)]+")"}return"#"+(16777216|n|e<<8|t<<16).toString(16).slice(1)});var Y=function(t){var e=k.doc.getElementsByTagName("head")[0]||k.doc.getElementsByTagName("svg")[0],n="rgb(255, 0, 0)";return(Y=s(function(t){if("red"==t.toLowerCase())return n;e.style.color=n,e.style.color=t;var r=k.doc.defaultView.getComputedStyle(e,L).getPropertyValue("color");return r==n?null:r}))(t)},W=function(){return"hsb("+[this.h,this.s,this.b]+")"},Z=function(){return"hsl("+[this.h,this.s,this.l]+")"},Q=function(){return 1==this.opacity||null==this.opacity?this.hex:"rgba("+[this.r,this.g,this.b,this.opacity]+")"},J=function(t,e,r){if(null==e&&i(t,"object")&&"r"in t&&"g"in t&&"b"in t&&(r=t.b,e=t.g,t=t.r),null==e&&i(t,string)){var o=n.getRGB(t);t=o.r,e=o.g,r=o.b}return(t>1||e>1||r>1)&&(t/=255,e/=255,r/=255),[t,e,r]},K=function(t,e,r,o){t=F.round(255*t),e=F.round(255*e),r=F.round(255*r);var a={r:t,g:e,b:r,opacity:i(o,"finite")?o:1,hex:n.rgb(t,e,r),toString:Q};return i(o,"finite")&&(a.opacity=o),a};n.color=function(t){var e;return i(t,"object")&&"h"in t&&"s"in t&&"b"in t?(e=n.hsb2rgb(t),t.r=e.r,t.g=e.g,t.b=e.b,t.opacity=1,t.hex=e.hex):i(t,"object")&&"h"in t&&"s"in t&&"l"in t?(e=n.hsl2rgb(t),t.r=e.r,t.g=e.g,t.b=e.b,t.opacity=1,t.hex=e.hex):(i(t,"string")&&(t=n.getRGB(t)),i(t,"object")&&"r"in t&&"g"in t&&"b"in t&&!("error"in t)?(e=n.rgb2hsl(t),t.h=e.h,t.s=e.s,t.l=e.l,e=n.rgb2hsb(t),t.v=e.b):(t={hex:"none"},t.r=t.g=t.b=t.h=t.s=t.v=t.l=-1,t.error=1)),t.toString=Q,t},n.hsb2rgb=function(t,e,n,r){i(t,"object")&&"h"in t&&"s"in t&&"b"in t&&(n=t.b,e=t.s,r=t.o,t=t.h),t*=360;var o,a,s,u,l;return t=t%360/60,l=n*e,u=l*(1-j(t%2-1)),o=a=s=n-l,t=~~t,o+=[l,u,0,0,u,l][t],a+=[u,l,l,u,0,0][t],s+=[0,0,u,l,l,u][t],K(o,a,s,r)},n.hsl2rgb=function(t,e,n,r){i(t,"object")&&"h"in t&&"s"in t&&"l"in t&&(n=t.l,e=t.s,t=t.h),(t>1||e>1||n>1)&&(t/=360,e/=100,n/=100),t*=360;var o,a,s,u,l;return t=t%360/60,l=2*e*(.5>n?n:1-n),u=l*(1-j(t%2-1)),o=a=s=n-l/2,t=~~t,o+=[l,u,0,0,u,l][t],a+=[u,l,l,u,0,0][t],s+=[0,0,u,l,l,u][t],K(o,a,s,r)},n.rgb2hsb=function(t,e,n){n=J(t,e,n),t=n[0],e=n[1],n=n[2];var r,i,o,a;return o=M(t,e,n),a=o-N(t,e,n),r=0==a?null:o==t?(e-n)/a:o==e?(n-t)/a+2:(t-e)/a+4,r=(r+360)%6*60/360,i=0==a?0:a/o,{h:r,s:i,b:o,toString:W}},n.rgb2hsl=function(t,e,n){n=J(t,e,n),t=n[0],e=n[1],n=n[2];var r,i,o,a,s,u;return a=M(t,e,n),s=N(t,e,n),u=a-s,r=0==u?null:a==t?(e-n)/u:a==e?(n-t)/u+2:(t-e)/u+4,r=(r+360)%6*60/360,o=(a+s)/2,i=0==u?0:.5>o?u/(2*o):u/(2-2*o),{h:r,s:i,l:o,toString:Z}},n.parsePathString=function(t){if(!t)return null;var e=n.path(t);if(e.arr)return n.path.clone(e.arr);var r={a:7,c:6,o:2,h:1,l:2,m:2,r:4,q:4,s:4,t:2,v:1,u:3,z:0},o=[];return i(t,"array")&&i(t[0],"array")&&(o=n.path.clone(t)),o.length||B(t).replace(G,function(t,e,n){var i=[],a=e.toLowerCase();if(n.replace(R,function(t,e){e&&i.push(+e)}),"m"==a&&i.length>2&&(o.push([e].concat(i.splice(0,2))),a="l",e="m"==e?"l":"L"),"o"==a&&1==i.length&&o.push([e,i[0]]),"r"==a)o.push([e].concat(i));else for(;i.length>=r[a]&&(o.push([e].concat(i.splice(0,r[a]))),r[a]););}),o.toString=n.path.toString,e.arr=n.path.clone(o),o};var tt=n.parseTransformString=function(t){if(!t)return null;var e=[];return i(t,"array")&&i(t[0],"array")&&(e=n.path.clone(t)),e.length||B(t).replace(D,function(t,n,r){var i=[];n.toLowerCase();r.replace(R,function(t,e){e&&i.push(+e)}),e.push([n].concat(i))}),e.toString=n.path.toString,e};n._.svgTransform2string=f,n._.rgTransform=/^[a-z][\s]*-?\.?\d/i,n._.transform2matrix=h,n._unit2px=v;k.doc.contains||k.doc.compareDocumentPosition?function(t,e){var n=9==t.nodeType?t.documentElement:t,r=e&&e.parentNode;return t==r||!(!r||1!=r.nodeType||!(n.contains?n.contains(r):t.compareDocumentPosition&&16&t.compareDocumentPosition(r)))}:function(t,e){if(e)for(;e;)if(e=e.parentNode,e==t)return!0;return!1};n._.getSomeDefs=d,n._.getSomeSVG=p,n.select=function(t){return t=B(t).replace(/([^\\]):/g,"$1\\:"),S(k.doc.querySelector(t))},n.selectAll=function(t){for(var e=k.doc.querySelectorAll(t),r=(n.set||Array)(),i=0;i<e.length;i++)r.push(S(e[i]));return r},setInterval(function(){for(var t in H)if(H[_](t)){var e=H[t],n=e.node;("svg"!=e.type&&!n.ownerSVGElement||"svg"==e.type&&(!n.parentNode||"ownerSVGElement"in n.parentNode&&!n.ownerSVGElement))&&delete H[t]}},1e4),y.prototype.attr=function(t,n){var r=this,o=r.node;if(!t){if(1!=o.nodeType)return{text:o.nodeValue};for(var a=o.attributes,s={},u=0,l=a.length;l>u;u++)s[a[u].nodeName]=a[u].nodeValue;return s}if(i(t,"string")){if(!(arguments.length>1))return e("snap.util.getattr."+t,r).firstDefined();var c={};c[t]=n,t=c}for(var f in t)t[_](f)&&e("snap.util.attr."+f,r,t[f]);return r},n.parse=function(t){var e=k.doc.createDocumentFragment(),n=!0,r=k.doc.createElement("div");if(t=B(t),t.match(/^\s*<\s*svg(?:\s|>)/)||(t="<svg>"+t+"</svg>",n=!1),r.innerHTML=t,t=r.getElementsByTagName("svg")[0])if(n)e=t;else for(;t.firstChild;)e.appendChild(t.firstChild);return new x(e)},n.fragment=function(){for(var t=Array.prototype.slice.call(arguments,0),e=k.doc.createDocumentFragment(),r=0,i=t.length;i>r;r++){var o=t[r];o.node&&o.node.nodeType&&e.appendChild(o.node),o.nodeType&&e.appendChild(o),"string"==typeof o&&e.appendChild(n.parse(o).node)}return new x(e)},n._.make=b,n._.wrap=S,w.prototype.el=function(t,e){var n=b(t,this.node);return e&&n.attr(e),n},y.prototype.children=function(){for(var t=[],e=this.node.childNodes,r=0,i=e.length;i>r;r++)t[r]=n(e[r]);return t},y.prototype.toJSON=function(){var t=[];return C([this],t),t[0]},e.on("snap.util.getattr",function(){var t=e.nt();t=t.substring(t.lastIndexOf(".")+1);var n=t.replace(/[A-Z]/g,function(t){return"-"+t.toLowerCase()});return et[_](n)?this.node.ownerDocument.defaultView.getComputedStyle(this.node,null).getPropertyValue(n):r(this.node,t)});var et={"alignment-baseline":0,"baseline-shift":0,clip:0,"clip-path":0,"clip-rule":0,color:0,"color-interpolation":0,"color-interpolation-filters":0,"color-profile":0,"color-rendering":0,cursor:0,direction:0,display:0,"dominant-baseline":0,"enable-background":0,fill:0,"fill-opacity":0,"fill-rule":0,filter:0,"flood-color":0,"flood-opacity":0,font:0,"font-family":0,"font-size":0,"font-size-adjust":0,"font-stretch":0,"font-style":0,"font-variant":0,"font-weight":0,"glyph-orientation-horizontal":0,"glyph-orientation-vertical":0,"image-rendering":0,kerning:0,"letter-spacing":0,"lighting-color":0,marker:0,"marker-end":0,"marker-mid":0,"marker-start":0,mask:0,opacity:0,overflow:0,"pointer-events":0,"shape-rendering":0,"stop-color":0,"stop-opacity":0,stroke:0,"stroke-dasharray":0,"stroke-dashoffset":0,"stroke-linecap":0,"stroke-linejoin":0,"stroke-miterlimit":0,"stroke-opacity":0,"stroke-width":0,"text-anchor":0,"text-decoration":0,"text-rendering":0,"unicode-bidi":0,visibility:0,"word-spacing":0,"writing-mode":0};e.on("snap.util.attr",function(t){var n=e.nt(),i={};n=n.substring(n.lastIndexOf(".")+1),i[n]=t;var o=n.replace(/-(\w)/gi,function(t,e){return e.toUpperCase()}),a=n.replace(/[A-Z]/g,function(t){return"-"+t.toLowerCase()});et[_](a)?this.node.style[o]=null==t?L:t:r(this.node,i)}),function(t){}(w.prototype),n.ajax=function(t,n,r,o){var a=new XMLHttpRequest,s=U();if(a){if(i(n,"function"))o=r,r=n,n=null;else if(i(n,"object")){var u=[];for(var l in n)n.hasOwnProperty(l)&&u.push(encodeURIComponent(l)+"="+encodeURIComponent(n[l]));n=u.join("&")}return a.open(n?"POST":"GET",t,!0),n&&(a.setRequestHeader("X-Requested-With","XMLHttpRequest"),a.setRequestHeader("Content-type","application/x-www-form-urlencoded")),r&&(e.once("snap.ajax."+s+".0",r),e.once("snap.ajax."+s+".200",r),e.once("snap.ajax."+s+".304",r)),a.onreadystatechange=function(){4==a.readyState&&e("snap.ajax."+s+"."+a.status,o,a)},4==a.readyState?a:(a.send(n),a)}},n.load=function(t,e,r){n.ajax(t,function(t){var i=n.parse(t.responseText);r?e.call(r,i):e(i)})};var nt=function(t){var e=t.getBoundingClientRect(),n=t.ownerDocument,r=n.body,i=n.documentElement,o=i.clientTop||r.clientTop||0,a=i.clientLeft||r.clientLeft||0,s=e.top+(g.win.pageYOffset||i.scrollTop||r.scrollTop)-o,u=e.left+(g.win.pageXOffset||i.scrollLeft||r.scrollLeft)-a;return{y:s,x:u}};return n.getElementByPoint=function(t,e){var n=this,r=(n.canvas,k.doc.elementFromPoint(t,e));if(k.win.opera&&"svg"==r.tagName){var i=nt(r),o=r.createSVGRect();o.x=t-i.x,o.y=e-i.y,o.width=o.height=1;var a=r.getIntersectionList(o,null);a.length&&(r=a[a.length-1])}return r?S(r):null},n.plugin=function(t){t(n,y,w,k,x)},k.win.Snap=n,n}(t||this);return r.plugin(function(r,i,o,a,s){function u(t,e){if(null==e){var n=!0;if(e="linearGradient"==t.type||"radialGradient"==t.type?t.node.getAttribute("gradientTransform"):"pattern"==t.type?t.node.getAttribute("patternTransform"):t.node.getAttribute("transform"),!e)return new r.Matrix;e=r._.svgTransform2string(e)}else e=r._.rgTransform.test(e)?p(e).replace(/\.{3}|\u2026/g,t._.transform||E):r._.svgTransform2string(e),d(e,"array")&&(e=r.path?r.path.toString.call(e):p(e)),t._.transform=e;var i=r._.transform2matrix(e,t.getBBox(1));return n?i:void(t.matrix=i)}function l(t){function e(t,e){var n=v(t.node,e);n=n&&n.match(o),n=n&&n[2],n&&"#"==n.charAt()&&(n=n.substring(1),n&&(s[n]=(s[n]||[]).concat(function(n){var r={};r[e]=URL(n),v(t.node,r)})))}function n(t){var e=v(t.node,"xlink:href");e&&"#"==e.charAt()&&(e=e.substring(1),e&&(s[e]=(s[e]||[]).concat(function(e){t.attr("xlink:href","#"+e)})))}for(var r,i=t.selectAll("*"),o=/^\s*url\(("|'|)(.*)\1\)\s*$/,a=[],s={},u=0,l=i.length;l>u;u++){r=i[u],e(r,"fill"),e(r,"stroke"),e(r,"filter"),e(r,"mask"),e(r,"clip-path"),n(r);var c=v(r.node,"id");c&&(v(r.node,{id:r.id}),a.push({old:c,id:r.id}))}for(u=0,l=a.length;l>u;u++){var f=s[a[u].old];if(f)for(var h=0,d=f.length;d>h;h++)f[h](a[u].id)}}function c(t,e,n){return function(r){var i=r.slice(t,e);return 1==i.length&&(i=i[0]),n?n(i):i}}function f(t){return function(){var e=t?"<"+this.type:"",n=this.node.attributes,r=this.node.childNodes;if(t)for(var i=0,o=n.length;o>i;i++)e+=" "+n[i].name+'="'+n[i].value.replace(/"/g,'\\"')+'"';if(r.length){for(t&&(e+=">"),i=0,o=r.length;o>i;i++)3==r[i].nodeType?e+=r[i].nodeValue:1==r[i].nodeType&&(e+=b(r[i]).toString());t&&(e+="</"+this.type+">")}else t&&(e+="/>");return e}}var h=i.prototype,d=r.is,p=String,g=r._unit2px,v=r._.$,m=r._.make,y=r._.getSomeDefs,x="hasOwnProperty",b=r._.wrap;h.getBBox=function(t){if(!r.Matrix||!r.path)return this.node.getBBox();var e=this,n=new r.Matrix;if(e.removed)return r._.box();for(;"use"==e.type;)if(t||(n=n.add(e.transform().localMatrix.translate(e.attr("x")||0,e.attr("y")||0))),e.original)e=e.original;else{var i=e.attr("xlink:href");e=e.original=e.node.ownerDocument.getElementById(i.substring(i.indexOf("#")+1))}var o=e._,a=r.path.get[e.type]||r.path.get.deflt;try{return t?(o.bboxwt=a?r.path.getBBox(e.realPath=a(e)):r._.box(e.node.getBBox()),r._.box(o.bboxwt)):(e.realPath=a(e),e.matrix=e.transform().localMatrix,o.bbox=r.path.getBBox(r.path.map(e.realPath,n.add(e.matrix))),r._.box(o.bbox))}catch(s){return r._.box()}};var w=function(){return this.string};h.transform=function(t){var e=this._;if(null==t){for(var n,i=this,o=new r.Matrix(this.node.getCTM()),a=u(this),s=[a],l=new r.Matrix,c=a.toTransformString(),f=p(a)==p(this.matrix)?p(e.transform):c;"svg"!=i.type&&(i=i.parent());)s.push(u(i));for(n=s.length;n--;)l.add(s[n]);return{string:f,globalMatrix:o,totalMatrix:l,localMatrix:a,diffMatrix:o.clone().add(a.invert()),global:o.toTransformString(),total:l.toTransformString(),local:c,toString:w}}return t instanceof r.Matrix?(this.matrix=t,this._.transform=t.toTransformString()):u(this,t),this.node&&("linearGradient"==this.type||"radialGradient"==this.type?v(this.node,{gradientTransform:this.matrix}):"pattern"==this.type?v(this.node,{patternTransform:this.matrix}):v(this.node,{transform:this.matrix})),this},h.parent=function(){return b(this.node.parentNode)},h.append=h.add=function(t){if(t){if("set"==t.type){var e=this;return t.forEach(function(t){e.add(t)}),this}t=b(t),this.node.appendChild(t.node),t.paper=this.paper}return this},h.appendTo=function(t){return t&&(t=b(t),t.append(this)),this},h.prepend=function(t){if(t){if("set"==t.type){var e,n=this;return t.forEach(function(t){e?e.after(t):n.prepend(t),e=t}),this}t=b(t);var r=t.parent();this.node.insertBefore(t.node,this.node.firstChild),this.add&&this.add(),t.paper=this.paper,this.parent()&&this.parent().add(),r&&r.add()}return this},h.prependTo=function(t){return t=b(t),t.prepend(this),this},h.before=function(t){if("set"==t.type){var e=this;return t.forEach(function(t){var n=t.parent();e.node.parentNode.insertBefore(t.node,e.node),n&&n.add()}),this.parent().add(),this}t=b(t);var n=t.parent();return this.node.parentNode.insertBefore(t.node,this.node),this.parent()&&this.parent().add(),n&&n.add(),t.paper=this.paper,this},h.after=function(t){t=b(t);var e=t.parent();return this.node.nextSibling?this.node.parentNode.insertBefore(t.node,this.node.nextSibling):this.node.parentNode.appendChild(t.node),this.parent()&&this.parent().add(),e&&e.add(),t.paper=this.paper,this},h.insertBefore=function(t){t=b(t);var e=this.parent();return t.node.parentNode.insertBefore(this.node,t.node),this.paper=t.paper,e&&e.add(),t.parent()&&t.parent().add(),this},h.insertAfter=function(t){t=b(t);var e=this.parent();return t.node.parentNode.insertBefore(this.node,t.node.nextSibling),this.paper=t.paper,e&&e.add(),t.parent()&&t.parent().add(),this},h.remove=function(){var t=this.parent();return this.node.parentNode&&this.node.parentNode.removeChild(this.node),delete this.paper,this.removed=!0,t&&t.add(),this},h.select=function(t){return t=p(t).replace(/([^\\]):/g,"$1\\:"),b(this.node.querySelector(t))},h.selectAll=function(t){for(var e=this.node.querySelectorAll(t),n=(r.set||Array)(),i=0;i<e.length;i++)n.push(b(e[i]));return n},h.asPX=function(t,e){return null==e&&(e=this.attr(t)),+g(this,t,e)},h.use=function(){var t,e=this.node.id;return e||(e=this.id,v(this.node,{id:e})),t="linearGradient"==this.type||"radialGradient"==this.type||"pattern"==this.type?m(this.type,this.node.parentNode):m("use",this.node.parentNode),v(t.node,{"xlink:href":"#"+e}),t.original=this,t},h.clone=function(){var t=b(this.node.cloneNode(!0));return v(t.node,"id")&&v(t.node,{id:t.id}),l(t),t.insertAfter(this),t},h.toDefs=function(){var t=y(this);return t.appendChild(this.node),this},h.pattern=h.toPattern=function(t,e,n,r){var i=m("pattern",y(this));return null==t&&(t=this.getBBox()),d(t,"object")&&"x"in t&&(e=t.y,n=t.width,r=t.height,t=t.x),v(i.node,{x:t,y:e,width:n,height:r,patternUnits:"userSpaceOnUse",id:i.id,viewBox:[t,e,n,r].join(" ")}),i.node.appendChild(this.node),i},h.marker=function(t,e,n,r,i,o){var a=m("marker",y(this));return null==t&&(t=this.getBBox()),d(t,"object")&&"x"in t&&(e=t.y,n=t.width,r=t.height,i=t.refX||t.cx,o=t.refY||t.cy,t=t.x),v(a.node,{viewBox:[t,e,n,r].join(" "),markerWidth:n,markerHeight:r,orient:"auto",refX:i||0,refY:o||0,id:a.id}),a.node.appendChild(this.node),a};var S=function(t,e,r,i){"function"!=typeof r||r.length||(i=r,r=n.linear),this.attr=t,this.dur=e,r&&(this.easing=r),i&&(this.callback=i)};r._.Animation=S,r.animation=function(t,e,n,r){return new S(t,e,n,r)},h.inAnim=function(){var t=this,e=[];for(var n in t.anims)t.anims[x](n)&&!function(t){e.push({anim:new S(t._attrs,t.dur,t.easing,t._callback),mina:t,curStatus:t.status(),status:function(e){return t.status(e)},stop:function(){t.stop()}})}(t.anims[n]);return e},r.animate=function(t,r,i,o,a,s){"function"!=typeof a||a.length||(s=a,a=n.linear);var u=n.time(),l=n(t,r,u,u+o,n.time,i,a);return s&&e.once("mina.finish."+l.id,s),l},h.stop=function(){for(var t=this.inAnim(),e=0,n=t.length;n>e;e++)t[e].stop();return this},h.animate=function(t,r,i,o){"function"!=typeof i||i.length||(o=i,i=n.linear),t instanceof S&&(o=t.callback,i=t.easing,r=i.dur,t=t.attr);var a,s,u,l,f=[],h=[],g={},v=this;for(var m in t)if(t[x](m)){v.equal?(l=v.equal(m,p(t[m])),a=l.from,s=l.to,u=l.f):(a=+v.attr(m),s=+t[m]);var y=d(a,"array")?a.length:1;g[m]=c(f.length,f.length+y,u),f=f.concat(a),h=h.concat(s)}var b=n.time(),w=n(f,h,b,b+r,n.time,function(t){var e={};for(var n in g)g[x](n)&&(e[n]=g[n](t));v.attr(e)},i);return v.anims[w.id]=w,w._attrs=t,w._callback=o,e("snap.animcreated."+v.id,w),e.once("mina.finish."+w.id,function(){delete v.anims[w.id],o&&o.call(v)}),e.once("mina.stop."+w.id,function(){delete v.anims[w.id]}),v};var C={};h.data=function(t,n){
var i=C[this.id]=C[this.id]||{};if(0==arguments.length)return e("snap.data.get."+this.id,this,i,null),i;if(1==arguments.length){if(r.is(t,"object")){for(var o in t)t[x](o)&&this.data(o,t[o]);return this}return e("snap.data.get."+this.id,this,i[t],t),i[t]}return i[t]=n,e("snap.data.set."+this.id,this,n,t),this},h.removeData=function(t){return null==t?C[this.id]={}:C[this.id]&&delete C[this.id][t],this},h.outerSVG=h.toString=f(1),h.innerSVG=f(),h.toDataURL=function(){if(t&&t.btoa){var e=this.getBBox(),n=r.format('<svg version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="{width}" height="{height}" viewBox="{x} {y} {width} {height}">{contents}</svg>',{x:+e.x.toFixed(3),y:+e.y.toFixed(3),width:+e.width.toFixed(3),height:+e.height.toFixed(3),contents:this.outerSVG()});return"data:image/svg+xml;base64,"+btoa(unescape(encodeURIComponent(n)))}},s.prototype.select=h.select,s.prototype.selectAll=h.selectAll}),r.plugin(function(t,e,n,r,i){function o(t,e,n,r,i,o){return null==e&&"[object SVGMatrix]"==a.call(t)?(this.a=t.a,this.b=t.b,this.c=t.c,this.d=t.d,this.e=t.e,void(this.f=t.f)):void(null!=t?(this.a=+t,this.b=+e,this.c=+n,this.d=+r,this.e=+i,this.f=+o):(this.a=1,this.b=0,this.c=0,this.d=1,this.e=0,this.f=0))}var a=Object.prototype.toString,s=String,u=Math,l="";!function(e){function n(t){return t[0]*t[0]+t[1]*t[1]}function r(t){var e=u.sqrt(n(t));t[0]&&(t[0]/=e),t[1]&&(t[1]/=e)}e.add=function(t,e,n,r,i,a){var s,u,l,c,f=[[],[],[]],h=[[this.a,this.c,this.e],[this.b,this.d,this.f],[0,0,1]],d=[[t,n,i],[e,r,a],[0,0,1]];for(t&&t instanceof o&&(d=[[t.a,t.c,t.e],[t.b,t.d,t.f],[0,0,1]]),s=0;3>s;s++)for(u=0;3>u;u++){for(c=0,l=0;3>l;l++)c+=h[s][l]*d[l][u];f[s][u]=c}return this.a=f[0][0],this.b=f[1][0],this.c=f[0][1],this.d=f[1][1],this.e=f[0][2],this.f=f[1][2],this},e.invert=function(){var t=this,e=t.a*t.d-t.b*t.c;return new o(t.d/e,-t.b/e,-t.c/e,t.a/e,(t.c*t.f-t.d*t.e)/e,(t.b*t.e-t.a*t.f)/e)},e.clone=function(){return new o(this.a,this.b,this.c,this.d,this.e,this.f)},e.translate=function(t,e){return this.add(1,0,0,1,t,e)},e.scale=function(t,e,n,r){return null==e&&(e=t),(n||r)&&this.add(1,0,0,1,n,r),this.add(t,0,0,e,0,0),(n||r)&&this.add(1,0,0,1,-n,-r),this},e.rotate=function(e,n,r){e=t.rad(e),n=n||0,r=r||0;var i=+u.cos(e).toFixed(9),o=+u.sin(e).toFixed(9);return this.add(i,o,-o,i,n,r),this.add(1,0,0,1,-n,-r)},e.x=function(t,e){return t*this.a+e*this.c+this.e},e.y=function(t,e){return t*this.b+e*this.d+this.f},e.get=function(t){return+this[s.fromCharCode(97+t)].toFixed(4)},e.toString=function(){return"matrix("+[this.get(0),this.get(1),this.get(2),this.get(3),this.get(4),this.get(5)].join()+")"},e.offset=function(){return[this.e.toFixed(4),this.f.toFixed(4)]},e.determinant=function(){return this.a*this.d-this.b*this.c},e.split=function(){var e={};e.dx=this.e,e.dy=this.f;var i=[[this.a,this.c],[this.b,this.d]];e.scalex=u.sqrt(n(i[0])),r(i[0]),e.shear=i[0][0]*i[1][0]+i[0][1]*i[1][1],i[1]=[i[1][0]-i[0][0]*e.shear,i[1][1]-i[0][1]*e.shear],e.scaley=u.sqrt(n(i[1])),r(i[1]),e.shear/=e.scaley,this.determinant()<0&&(e.scalex=-e.scalex);var o=-i[0][1],a=i[1][1];return 0>a?(e.rotate=t.deg(u.acos(a)),0>o&&(e.rotate=360-e.rotate)):e.rotate=t.deg(u.asin(o)),e.isSimple=!(+e.shear.toFixed(9)||e.scalex.toFixed(9)!=e.scaley.toFixed(9)&&e.rotate),e.isSuperSimple=!+e.shear.toFixed(9)&&e.scalex.toFixed(9)==e.scaley.toFixed(9)&&!e.rotate,e.noRotation=!+e.shear.toFixed(9)&&!e.rotate,e},e.toTransformString=function(t){var e=t||this.split();return+e.shear.toFixed(9)?"m"+[this.get(0),this.get(1),this.get(2),this.get(3),this.get(4),this.get(5)]:(e.scalex=+e.scalex.toFixed(4),e.scaley=+e.scaley.toFixed(4),e.rotate=+e.rotate.toFixed(4),(e.dx||e.dy?"t"+[+e.dx.toFixed(4),+e.dy.toFixed(4)]:l)+(1!=e.scalex||1!=e.scaley?"s"+[e.scalex,e.scaley,0,0]:l)+(e.rotate?"r"+[+e.rotate.toFixed(4),0,0]:l))}}(o.prototype),t.Matrix=o,t.matrix=function(t,e,n,r,i,a){return new o(t,e,n,r,i,a)}}),r.plugin(function(t,n,r,i,o){function a(r){return function(i){if(e.stop(),i instanceof o&&1==i.node.childNodes.length&&("radialGradient"==i.node.firstChild.tagName||"linearGradient"==i.node.firstChild.tagName||"pattern"==i.node.firstChild.tagName)&&(i=i.node.firstChild,d(this).appendChild(i),i=f(i)),i instanceof n)if("radialGradient"==i.type||"linearGradient"==i.type||"pattern"==i.type){i.node.id||g(i.node,{id:i.id});var a=v(i.node.id)}else a=i.attr(r);else if(a=t.color(i),a.error){var s=t(d(this).ownerSVGElement).gradient(i);s?(s.node.id||g(s.node,{id:s.id}),a=v(s.node.id)):a=i}else a=m(a);var u={};u[r]=a,g(this.node,u),this.node.style[r]=x}}function s(t){e.stop(),t==+t&&(t+="px"),this.node.style.fontSize=t}function u(t){for(var e=[],n=t.childNodes,r=0,i=n.length;i>r;r++){var o=n[r];3==o.nodeType&&e.push(o.nodeValue),"tspan"==o.tagName&&(1==o.childNodes.length&&3==o.firstChild.nodeType?e.push(o.firstChild.nodeValue):e.push(u(o)))}return e}function l(){return e.stop(),this.node.style.fontSize}var c=t._.make,f=t._.wrap,h=t.is,d=t._.getSomeDefs,p=/^url\(#?([^)]+)\)$/,g=t._.$,v=t.url,m=String,y=t._.separator,x="";e.on("snap.util.attr.mask",function(t){if(t instanceof n||t instanceof o){if(e.stop(),t instanceof o&&1==t.node.childNodes.length&&(t=t.node.firstChild,d(this).appendChild(t),t=f(t)),"mask"==t.type)var r=t;else r=c("mask",d(this)),r.node.appendChild(t.node);!r.node.id&&g(r.node,{id:r.id}),g(this.node,{mask:v(r.id)})}}),function(t){e.on("snap.util.attr.clip",t),e.on("snap.util.attr.clip-path",t),e.on("snap.util.attr.clipPath",t)}(function(t){if(t instanceof n||t instanceof o){if(e.stop(),"clipPath"==t.type)var r=t;else r=c("clipPath",d(this)),r.node.appendChild(t.node),!r.node.id&&g(r.node,{id:r.id});g(this.node,{"clip-path":v(r.node.id||r.id)})}}),e.on("snap.util.attr.fill",a("fill")),e.on("snap.util.attr.stroke",a("stroke"));var b=/^([lr])(?:\(([^)]*)\))?(.*)$/i;e.on("snap.util.grad.parse",function(t){t=m(t);var e=t.match(b);if(!e)return null;var n=e[1],r=e[2],i=e[3];return r=r.split(/\s*,\s*/).map(function(t){return+t==t?+t:t}),1==r.length&&0==r[0]&&(r=[]),i=i.split("-"),i=i.map(function(t){t=t.split(":");var e={color:t[0]};return t[1]&&(e.offset=parseFloat(t[1])),e}),{type:n,params:r,stops:i}}),e.on("snap.util.attr.d",function(n){e.stop(),h(n,"array")&&h(n[0],"array")&&(n=t.path.toString.call(n)),n=m(n),n.match(/[ruo]/i)&&(n=t.path.toAbsolute(n)),g(this.node,{d:n})})(-1),e.on("snap.util.attr.#text",function(t){e.stop(),t=m(t);for(var n=i.doc.createTextNode(t);this.node.firstChild;)this.node.removeChild(this.node.firstChild);this.node.appendChild(n)})(-1),e.on("snap.util.attr.path",function(t){e.stop(),this.attr({d:t})})(-1),e.on("snap.util.attr.class",function(t){e.stop(),this.node.className.baseVal=t})(-1),e.on("snap.util.attr.viewBox",function(t){var n;n=h(t,"object")&&"x"in t?[t.x,t.y,t.width,t.height].join(" "):h(t,"array")?t.join(" "):t,g(this.node,{viewBox:n}),e.stop()})(-1),e.on("snap.util.attr.transform",function(t){this.transform(t),e.stop()})(-1),e.on("snap.util.attr.r",function(t){"rect"==this.type&&(e.stop(),g(this.node,{rx:t,ry:t}))})(-1),e.on("snap.util.attr.textpath",function(t){if(e.stop(),"text"==this.type){var r,i,o;if(!t&&this.textPath){for(i=this.textPath;i.node.firstChild;)this.node.appendChild(i.node.firstChild);return i.remove(),void delete this.textPath}if(h(t,"string")){var a=d(this),s=f(a.parentNode).path(t);a.appendChild(s.node),r=s.id,s.attr({id:r})}else t=f(t),t instanceof n&&(r=t.attr("id"),r||(r=t.id,t.attr({id:r})));if(r)if(i=this.textPath,o=this.node,i)i.attr({"xlink:href":"#"+r});else{for(i=g("textPath",{"xlink:href":"#"+r});o.firstChild;)i.appendChild(o.firstChild);o.appendChild(i),this.textPath=f(i)}}})(-1),e.on("snap.util.attr.text",function(t){if("text"==this.type){for(var n=this.node,r=function(t){var e=g("tspan");if(h(t,"array"))for(var n=0;n<t.length;n++)e.appendChild(r(t[n]));else e.appendChild(i.doc.createTextNode(t));return e.normalize&&e.normalize(),e};n.firstChild;)n.removeChild(n.firstChild);for(var o=r(t);o.firstChild;)n.appendChild(o.firstChild)}e.stop()})(-1),e.on("snap.util.attr.fontSize",s)(-1),e.on("snap.util.attr.font-size",s)(-1),e.on("snap.util.getattr.transform",function(){return e.stop(),this.transform()})(-1),e.on("snap.util.getattr.textpath",function(){return e.stop(),this.textPath})(-1),function(){function n(n){return function(){e.stop();var r=i.doc.defaultView.getComputedStyle(this.node,null).getPropertyValue("marker-"+n);return"none"==r?r:t(i.doc.getElementById(r.match(p)[1]))}}function r(t){return function(n){e.stop();var r="marker"+t.charAt(0).toUpperCase()+t.substring(1);if(""==n||!n)return void(this.node.style[r]="none");if("marker"==n.type){var i=n.node.id;return i||g(n.node,{id:n.id}),void(this.node.style[r]=v(i))}}}e.on("snap.util.getattr.marker-end",n("end"))(-1),e.on("snap.util.getattr.markerEnd",n("end"))(-1),e.on("snap.util.getattr.marker-start",n("start"))(-1),e.on("snap.util.getattr.markerStart",n("start"))(-1),e.on("snap.util.getattr.marker-mid",n("mid"))(-1),e.on("snap.util.getattr.markerMid",n("mid"))(-1),e.on("snap.util.attr.marker-end",r("end"))(-1),e.on("snap.util.attr.markerEnd",r("end"))(-1),e.on("snap.util.attr.marker-start",r("start"))(-1),e.on("snap.util.attr.markerStart",r("start"))(-1),e.on("snap.util.attr.marker-mid",r("mid"))(-1),e.on("snap.util.attr.markerMid",r("mid"))(-1)}(),e.on("snap.util.getattr.r",function(){return"rect"==this.type&&g(this.node,"rx")==g(this.node,"ry")?(e.stop(),g(this.node,"rx")):void 0})(-1),e.on("snap.util.getattr.text",function(){if("text"==this.type||"tspan"==this.type){e.stop();var t=u(this.node);return 1==t.length?t[0]:t}})(-1),e.on("snap.util.getattr.#text",function(){return this.node.textContent})(-1),e.on("snap.util.getattr.viewBox",function(){e.stop();var n=g(this.node,"viewBox");return n?(n=n.split(y),t._.box(+n[0],+n[1],+n[2],+n[3])):void 0})(-1),e.on("snap.util.getattr.points",function(){var t=g(this.node,"points");return e.stop(),t?t.split(y):void 0})(-1),e.on("snap.util.getattr.path",function(){var t=g(this.node,"d");return e.stop(),t})(-1),e.on("snap.util.getattr.class",function(){return this.node.className.baseVal})(-1),e.on("snap.util.getattr.fontSize",l)(-1),e.on("snap.util.getattr.font-size",l)(-1)}),r.plugin(function(t,e,n,r,i){var o=/\S+/g,a=String,s=e.prototype;s.addClass=function(t){var e,n,r,i,s=a(t||"").match(o)||[],u=this.node,l=u.className.baseVal,c=l.match(o)||[];if(s.length){for(e=0;r=s[e++];)n=c.indexOf(r),~n||c.push(r);i=c.join(" "),l!=i&&(u.className.baseVal=i)}return this},s.removeClass=function(t){var e,n,r,i,s=a(t||"").match(o)||[],u=this.node,l=u.className.baseVal,c=l.match(o)||[];if(c.length){for(e=0;r=s[e++];)n=c.indexOf(r),~n&&c.splice(n,1);i=c.join(" "),l!=i&&(u.className.baseVal=i)}return this},s.hasClass=function(t){var e=this.node,n=e.className.baseVal,r=n.match(o)||[];return!!~r.indexOf(t)},s.toggleClass=function(t,e){if(null!=e)return e?this.addClass(t):this.removeClass(t);var n,r,i,a,s=(t||"").match(o)||[],u=this.node,l=u.className.baseVal,c=l.match(o)||[];for(n=0;i=s[n++];)r=c.indexOf(i),~r?c.splice(r,1):c.push(i);return a=c.join(" "),l!=a&&(u.className.baseVal=a),this}}),r.plugin(function(t,n,r,i,o){function a(t){return t}function s(t){return function(e){return+e.toFixed(3)+t}}var u={"+":function(t,e){return t+e},"-":function(t,e){return t-e},"/":function(t,e){return t/e},"*":function(t,e){return t*e}},l=String,c=/[a-z]+$/i,f=/^\s*([+\-\/*])\s*=\s*([\d.eE+\-]+)\s*([^\d\s]+)?\s*$/;e.on("snap.util.attr",function(t){var n=l(t).match(f);if(n){var r=e.nt(),i=r.substring(r.lastIndexOf(".")+1),o=this.attr(i),a={};e.stop();var s=n[3]||"",h=o.match(c),d=u[n[1]];if(h&&h==s?t=d(parseFloat(o),+n[2]):(o=this.asPX(i),t=d(this.asPX(i),this.asPX(i,n[2]+s))),isNaN(o)||isNaN(t))return;a[i]=t,this.attr(a)}})(-10),e.on("snap.util.equal",function(t,n){var r=l(this.attr(t)||""),i=l(n).match(f);if(i){e.stop();var o=i[3]||"",h=r.match(c),d=u[i[1]];return h&&h==o?{from:parseFloat(r),to:d(parseFloat(r),+i[2]),f:s(h)}:(r=this.asPX(t),{from:r,to:d(r,this.asPX(t,i[2]+o)),f:a})}})(-10)}),r.plugin(function(n,r,i,o,a){var s=i.prototype,u=n.is;s.rect=function(t,e,n,r,i,o){var a;return null==o&&(o=i),u(t,"object")&&"[object Object]"==t?a=t:null!=t&&(a={x:t,y:e,width:n,height:r},null!=i&&(a.rx=i,a.ry=o)),this.el("rect",a)},s.circle=function(t,e,n){var r;return u(t,"object")&&"[object Object]"==t?r=t:null!=t&&(r={cx:t,cy:e,r:n}),this.el("circle",r)};var l=function(){function t(){this.parentNode.removeChild(this)}return function(e,n){var r=o.doc.createElement("img"),i=o.doc.body;r.style.cssText="position:absolute;left:-9999em;top:-9999em",r.onload=function(){n.call(r),r.onload=r.onerror=null,i.removeChild(r)},r.onerror=t,i.appendChild(r),r.src=e}}();s.image=function(t,e,r,i,o){var a=this.el("image");if(u(t,"object")&&"src"in t)a.attr(t);else if(null!=t){var s={"xlink:href":t,preserveAspectRatio:"none"};null!=e&&null!=r&&(s.x=e,s.y=r),null!=i&&null!=o?(s.width=i,s.height=o):l(t,function(){n._.$(a.node,{width:this.offsetWidth,height:this.offsetHeight})}),n._.$(a.node,s)}return a},s.ellipse=function(t,e,n,r){var i;return u(t,"object")&&"[object Object]"==t?i=t:null!=t&&(i={cx:t,cy:e,rx:n,ry:r}),this.el("ellipse",i)},s.path=function(t){var e;return u(t,"object")&&!u(t,"array")?e=t:t&&(e={d:t}),this.el("path",e)},s.group=s.g=function(t){var e=this.el("g");return 1==arguments.length&&t&&!t.type?e.attr(t):arguments.length&&e.add(Array.prototype.slice.call(arguments,0)),e},s.svg=function(t,e,n,r,i,o,a,s){var l={};return u(t,"object")&&null==e?l=t:(null!=t&&(l.x=t),null!=e&&(l.y=e),null!=n&&(l.width=n),null!=r&&(l.height=r),null!=i&&null!=o&&null!=a&&null!=s&&(l.viewBox=[i,o,a,s])),this.el("svg",l)},s.mask=function(t){var e=this.el("mask");return 1==arguments.length&&t&&!t.type?e.attr(t):arguments.length&&e.add(Array.prototype.slice.call(arguments,0)),e},s.ptrn=function(t,e,n,r,i,o,a,s){if(u(t,"object"))var l=t;else l={patternUnits:"userSpaceOnUse"},t&&(l.x=t),e&&(l.y=e),null!=n&&(l.width=n),null!=r&&(l.height=r),null!=i&&null!=o&&null!=a&&null!=s?l.viewBox=[i,o,a,s]:l.viewBox=[t||0,e||0,n||0,r||0];return this.el("pattern",l)},s.use=function(t){return null!=t?(t instanceof r&&(t.attr("id")||t.attr({id:n._.id(t)}),t=t.attr("id")),"#"==String(t).charAt()&&(t=t.substring(1)),this.el("use",{"xlink:href":"#"+t})):r.prototype.use.call(this)},s.symbol=function(t,e,n,r){var i={};return null!=t&&null!=e&&null!=n&&null!=r&&(i.viewBox=[t,e,n,r]),this.el("symbol",i)},s.text=function(t,e,n){var r={};return u(t,"object")?r=t:null!=t&&(r={x:t,y:e,text:n||""}),this.el("text",r)},s.line=function(t,e,n,r){var i={};return u(t,"object")?i=t:null!=t&&(i={x1:t,x2:n,y1:e,y2:r}),this.el("line",i)},s.polyline=function(t){arguments.length>1&&(t=Array.prototype.slice.call(arguments,0));var e={};return u(t,"object")&&!u(t,"array")?e=t:null!=t&&(e={points:t}),this.el("polyline",e)},s.polygon=function(t){arguments.length>1&&(t=Array.prototype.slice.call(arguments,0));var e={};return u(t,"object")&&!u(t,"array")?e=t:null!=t&&(e={points:t}),this.el("polygon",e)},function(){function r(){return this.selectAll("stop")}function i(t,e){var r=c("stop"),i={offset:+e+"%"};return t=n.color(t),i["stop-color"]=t.hex,t.opacity<1&&(i["stop-opacity"]=t.opacity),c(r,i),this.node.appendChild(r),this}function o(){if("linearGradient"==this.type){var t=c(this.node,"x1")||0,e=c(this.node,"x2")||1,r=c(this.node,"y1")||0,i=c(this.node,"y2")||0;return n._.box(t,r,math.abs(e-t),math.abs(i-r))}var o=this.node.cx||.5,a=this.node.cy||.5,s=this.node.r||0;return n._.box(o-s,a-s,2*s,2*s)}function a(t,n){function r(t,e){for(var n=(e-f)/(t-h),r=h;t>r;r++)a[r].offset=+(+f+n*(r-h)).toFixed(2);h=t,f=e}var i,o=e("snap.util.grad.parse",null,n).firstDefined();if(!o)return null;o.params.unshift(t),i="l"==o.type.toLowerCase()?u.apply(0,o.params):l.apply(0,o.params),o.type!=o.type.toLowerCase()&&c(i.node,{gradientUnits:"userSpaceOnUse"});var a=o.stops,s=a.length,f=0,h=0;s--;for(var d=0;s>d;d++)"offset"in a[d]&&r(d,a[d].offset);for(a[s].offset=a[s].offset||100,r(s,a[s].offset),d=0;s>=d;d++){var p=a[d];i.addStop(p.color,p.offset)}return i}function u(t,e,a,s,u){var l=n._.make("linearGradient",t);return l.stops=r,l.addStop=i,l.getBBox=o,null!=e&&c(l.node,{x1:e,y1:a,x2:s,y2:u}),l}function l(t,e,a,s,u,l){var f=n._.make("radialGradient",t);return f.stops=r,f.addStop=i,f.getBBox=o,null!=e&&c(f.node,{cx:e,cy:a,r:s}),null!=u&&null!=l&&c(f.node,{fx:u,fy:l}),f}var c=n._.$;s.gradient=function(t){return a(this.defs,t)},s.gradientLinear=function(t,e,n,r){return u(this.defs,t,e,n,r)},s.gradientRadial=function(t,e,n,r,i){return l(this.defs,t,e,n,r,i)},s.toString=function(){var t,e=this.node.ownerDocument,r=e.createDocumentFragment(),i=e.createElement("div"),o=this.node.cloneNode(!0);return r.appendChild(i),i.appendChild(o),n._.$(o,{xmlns:"http://www.w3.org/2000/svg"}),t=i.innerHTML,r.removeChild(r.firstChild),t},s.toDataURL=function(){return t&&t.btoa?"data:image/svg+xml;base64,"+btoa(unescape(encodeURIComponent(this))):void 0},s.clear=function(){for(var t,e=this.node.firstChild;e;)t=e.nextSibling,"defs"!=e.tagName?e.parentNode.removeChild(e):s.clear.call({node:e}),e=t}}()}),r.plugin(function(t,e,n,r){function i(t){var e=i.ps=i.ps||{};return e[t]?e[t].sleep=100:e[t]={sleep:100},setTimeout(function(){for(var n in e)e[O](n)&&n!=t&&(e[n].sleep--,!e[n].sleep&&delete e[n])}),e[t]}function o(t,e,n,r){return null==t&&(t=e=n=r=0),null==e&&(e=t.y,n=t.width,r=t.height,t=t.x),{x:t,y:e,width:n,w:n,height:r,h:r,x2:t+n,y2:e+r,cx:t+n/2,cy:e+r/2,r1:R.min(n,r)/2,r2:R.max(n,r)/2,r0:R.sqrt(n*n+r*r)/2,path:k(t,e,n,r),vb:[t,e,n,r].join(" ")}}function a(){return this.join(",").replace(G,"$1")}function s(t){var e=V(t);return e.toString=a,e}function u(t,e,n,r,i,o,a,s,u){return null==u?g(t,e,n,r,i,o,a,s):c(t,e,n,r,i,o,a,s,v(t,e,n,r,i,o,a,s,u))}function l(n,r){function i(t){return+(+t).toFixed(3)}return t._.cacher(function(t,o,a){t instanceof e&&(t=t.attr("d")),t=j(t);for(var s,l,f,h,d,p="",g={},v=0,m=0,y=t.length;y>m;m++){if(f=t[m],"M"==f[0])s=+f[1],l=+f[2];else{if(h=u(s,l,f[1],f[2],f[3],f[4],f[5],f[6]),v+h>o){if(r&&!g.start){if(d=u(s,l,f[1],f[2],f[3],f[4],f[5],f[6],o-v),p+=["C"+i(d.start.x),i(d.start.y),i(d.m.x),i(d.m.y),i(d.x),i(d.y)],a)return p;g.start=p,p=["M"+i(d.x),i(d.y)+"C"+i(d.n.x),i(d.n.y),i(d.end.x),i(d.end.y),i(f[5]),i(f[6])].join(),v+=h,s=+f[5],l=+f[6];continue}if(!n&&!r)return d=u(s,l,f[1],f[2],f[3],f[4],f[5],f[6],o-v)}v+=h,s=+f[5],l=+f[6]}p+=f.shift()+f}return g.end=p,d=n?v:r?g:c(s,l,f[0],f[1],f[2],f[3],f[4],f[5],1)},null,t._.clone)}function c(t,e,n,r,i,o,a,s,u){var l=1-u,c=X(l,3),f=X(l,2),h=u*u,d=h*u,p=c*t+3*f*u*n+3*l*u*u*i+d*a,g=c*e+3*f*u*r+3*l*u*u*o+d*s,v=t+2*u*(n-t)+h*(i-2*n+t),m=e+2*u*(r-e)+h*(o-2*r+e),y=n+2*u*(i-n)+h*(a-2*i+n),x=r+2*u*(o-r)+h*(s-2*o+r),b=l*t+u*n,w=l*e+u*r,S=l*i+u*a,C=l*o+u*s,k=90-180*R.atan2(v-y,m-x)/z;return{x:p,y:g,m:{x:v,y:m},n:{x:y,y:x},start:{x:b,y:w},end:{x:S,y:C},alpha:k}}function f(e,n,r,i,a,s,u,l){t.is(e,"array")||(e=[e,n,r,i,a,s,u,l]);var c=N.apply(null,e);return o(c.min.x,c.min.y,c.max.x-c.min.x,c.max.y-c.min.y)}function h(t,e,n){return e>=t.x&&e<=t.x+t.width&&n>=t.y&&n<=t.y+t.height}function d(t,e){return t=o(t),e=o(e),h(e,t.x,t.y)||h(e,t.x2,t.y)||h(e,t.x,t.y2)||h(e,t.x2,t.y2)||h(t,e.x,e.y)||h(t,e.x2,e.y)||h(t,e.x,e.y2)||h(t,e.x2,e.y2)||(t.x<e.x2&&t.x>e.x||e.x<t.x2&&e.x>t.x)&&(t.y<e.y2&&t.y>e.y||e.y<t.y2&&e.y>t.y)}function p(t,e,n,r,i){var o=-3*e+9*n-9*r+3*i,a=t*o+6*e-12*n+6*r;return t*a-3*e+3*n}function g(t,e,n,r,i,o,a,s,u){null==u&&(u=1),u=u>1?1:0>u?0:u;for(var l=u/2,c=12,f=[-.1252,.1252,-.3678,.3678,-.5873,.5873,-.7699,.7699,-.9041,.9041,-.9816,.9816],h=[.2491,.2491,.2335,.2335,.2032,.2032,.1601,.1601,.1069,.1069,.0472,.0472],d=0,g=0;c>g;g++){var v=l*f[g]+l,m=p(v,t,n,i,a),y=p(v,e,r,o,s),x=m*m+y*y;d+=h[g]*R.sqrt(x)}return l*d}function v(t,e,n,r,i,o,a,s,u){if(!(0>u||g(t,e,n,r,i,o,a,s)<u)){var l,c=1,f=c/2,h=c-f,d=.01;for(l=g(t,e,n,r,i,o,a,s,h);$(l-u)>d;)f/=2,h+=(u>l?1:-1)*f,l=g(t,e,n,r,i,o,a,s,h);return h}}function m(t,e,n,r,i,o,a,s){if(!(U(t,n)<I(i,a)||I(t,n)>U(i,a)||U(e,r)<I(o,s)||I(e,r)>U(o,s))){var u=(t*r-e*n)*(i-a)-(t-n)*(i*s-o*a),l=(t*r-e*n)*(o-s)-(e-r)*(i*s-o*a),c=(t-n)*(o-s)-(e-r)*(i-a);if(c){var f=u/c,h=l/c,d=+f.toFixed(2),p=+h.toFixed(2);if(!(d<+I(t,n).toFixed(2)||d>+U(t,n).toFixed(2)||d<+I(i,a).toFixed(2)||d>+U(i,a).toFixed(2)||p<+I(e,r).toFixed(2)||p>+U(e,r).toFixed(2)||p<+I(o,s).toFixed(2)||p>+U(o,s).toFixed(2)))return{x:f,y:h}}}}function y(t,e,n){var r=f(t),i=f(e);if(!d(r,i))return n?0:[];for(var o=g.apply(0,t),a=g.apply(0,e),s=~~(o/8),u=~~(a/8),l=[],h=[],p={},v=n?0:[],y=0;s+1>y;y++){var x=c.apply(0,t.concat(y/s));l.push({x:x.x,y:x.y,t:y/s})}for(y=0;u+1>y;y++)x=c.apply(0,e.concat(y/u)),h.push({x:x.x,y:x.y,t:y/u});for(y=0;s>y;y++)for(var b=0;u>b;b++){var w=l[y],S=l[y+1],C=h[b],k=h[b+1],_=$(S.x-w.x)<.001?"y":"x",B=$(k.x-C.x)<.001?"y":"x",T=m(w.x,w.y,S.x,S.y,C.x,C.y,k.x,k.y);if(T){if(p[T.x.toFixed(4)]==T.y.toFixed(4))continue;p[T.x.toFixed(4)]=T.y.toFixed(4);var A=w.t+$((T[_]-w[_])/(S[_]-w[_]))*(S.t-w.t),F=C.t+$((T[B]-C[B])/(k[B]-C[B]))*(k.t-C.t);A>=0&&1>=A&&F>=0&&1>=F&&(n?v++:v.push({x:T.x,y:T.y,t1:A,t2:F}))}}return v}function x(t,e){return w(t,e)}function b(t,e){return w(t,e,1)}function w(t,e,n){t=j(t),e=j(e);for(var r,i,o,a,s,u,l,c,f,h,d=n?0:[],p=0,g=t.length;g>p;p++){var v=t[p];if("M"==v[0])r=s=v[1],i=u=v[2];else{"C"==v[0]?(f=[r,i].concat(v.slice(1)),r=f[6],i=f[7]):(f=[r,i,r,i,s,u,s,u],r=s,i=u);for(var m=0,x=e.length;x>m;m++){var b=e[m];if("M"==b[0])o=l=b[1],a=c=b[2];else{"C"==b[0]?(h=[o,a].concat(b.slice(1)),o=h[6],a=h[7]):(h=[o,a,o,a,l,c,l,c],o=l,a=c);var w=y(f,h,n);if(n)d+=w;else{for(var S=0,C=w.length;C>S;S++)w[S].segment1=p,w[S].segment2=m,w[S].bez1=f,w[S].bez2=h;d=d.concat(w)}}}}}return d}function S(t,e,n){var r=C(t);return h(r,e,n)&&w(t,[["M",e,n],["H",r.x2+10]],1)%2==1}function C(t){var e=i(t);if(e.bbox)return V(e.bbox);if(!t)return o();t=j(t);for(var n,r=0,a=0,s=[],u=[],l=0,c=t.length;c>l;l++)if(n=t[l],"M"==n[0])r=n[1],a=n[2],s.push(r),u.push(a);else{var f=N(r,a,n[1],n[2],n[3],n[4],n[5],n[6]);s=s.concat(f.min.x,f.max.x),u=u.concat(f.min.y,f.max.y),r=n[5],a=n[6]}var h=I.apply(0,s),d=I.apply(0,u),p=U.apply(0,s),g=U.apply(0,u),v=o(h,d,p-h,g-d);return e.bbox=V(v),v}function k(t,e,n,r,i){if(i)return[["M",+t+ +i,e],["l",n-2*i,0],["a",i,i,0,0,1,i,i],["l",0,r-2*i],["a",i,i,0,0,1,-i,i],["l",2*i-n,0],["a",i,i,0,0,1,-i,-i],["l",0,2*i-r],["a",i,i,0,0,1,i,-i],["z"]];var o=[["M",t,e],["l",n,0],["l",0,r],["l",-n,0],["z"]];return o.toString=a,o}function _(t,e,n,r,i){if(null==i&&null==r&&(r=n),t=+t,e=+e,n=+n,r=+r,null!=i)var o=Math.PI/180,s=t+n*Math.cos(-r*o),u=t+n*Math.cos(-i*o),l=e+n*Math.sin(-r*o),c=e+n*Math.sin(-i*o),f=[["M",s,l],["A",n,n,0,+(i-r>180),0,u,c]];else f=[["M",t,e],["m",0,-r],["a",n,r,0,1,1,0,2*r],["a",n,r,0,1,1,0,-2*r],["z"]];return f.toString=a,f}function B(e){var n=i(e),r=String.prototype.toLowerCase;if(n.rel)return s(n.rel);t.is(e,"array")&&t.is(e&&e[0],"array")||(e=t.parsePathString(e));var o=[],u=0,l=0,c=0,f=0,h=0;"M"==e[0][0]&&(u=e[0][1],l=e[0][2],c=u,f=l,h++,o.push(["M",u,l]));for(var d=h,p=e.length;p>d;d++){var g=o[d]=[],v=e[d];if(v[0]!=r.call(v[0]))switch(g[0]=r.call(v[0]),g[0]){case"a":g[1]=v[1],g[2]=v[2],g[3]=v[3],g[4]=v[4],g[5]=v[5],g[6]=+(v[6]-u).toFixed(3),g[7]=+(v[7]-l).toFixed(3);break;case"v":g[1]=+(v[1]-l).toFixed(3);break;case"m":c=v[1],f=v[2];default:for(var m=1,y=v.length;y>m;m++)g[m]=+(v[m]-(m%2?u:l)).toFixed(3)}else{g=o[d]=[],"m"==v[0]&&(c=v[1]+u,f=v[2]+l);for(var x=0,b=v.length;b>x;x++)o[d][x]=v[x]}var w=o[d].length;switch(o[d][0]){case"z":u=c,l=f;break;case"h":u+=+o[d][w-1];break;case"v":l+=+o[d][w-1];break;default:u+=+o[d][w-2],l+=+o[d][w-1]}}return o.toString=a,n.rel=s(o),o}function T(e){var n=i(e);if(n.abs)return s(n.abs);if(E(e,"array")&&E(e&&e[0],"array")||(e=t.parsePathString(e)),!e||!e.length)return[["M",0,0]];var r,o=[],u=0,l=0,c=0,f=0,h=0;"M"==e[0][0]&&(u=+e[0][1],l=+e[0][2],c=u,f=l,h++,o[0]=["M",u,l]);for(var d,p,g=3==e.length&&"M"==e[0][0]&&"R"==e[1][0].toUpperCase()&&"Z"==e[2][0].toUpperCase(),v=h,m=e.length;m>v;v++){if(o.push(d=[]),p=e[v],r=p[0],r!=r.toUpperCase())switch(d[0]=r.toUpperCase(),d[0]){case"A":d[1]=p[1],d[2]=p[2],d[3]=p[3],d[4]=p[4],d[5]=p[5],d[6]=+p[6]+u,d[7]=+p[7]+l;break;case"V":d[1]=+p[1]+l;break;case"H":d[1]=+p[1]+u;break;case"R":for(var y=[u,l].concat(p.slice(1)),x=2,b=y.length;b>x;x++)y[x]=+y[x]+u,y[++x]=+y[x]+l;o.pop(),o=o.concat(L(y,g));break;case"O":o.pop(),y=_(u,l,p[1],p[2]),y.push(y[0]),o=o.concat(y);break;case"U":o.pop(),o=o.concat(_(u,l,p[1],p[2],p[3])),d=["U"].concat(o[o.length-1].slice(-2));break;case"M":c=+p[1]+u,f=+p[2]+l;default:for(x=1,b=p.length;b>x;x++)d[x]=+p[x]+(x%2?u:l)}else if("R"==r)y=[u,l].concat(p.slice(1)),o.pop(),o=o.concat(L(y,g)),d=["R"].concat(p.slice(-2));else if("O"==r)o.pop(),y=_(u,l,p[1],p[2]),y.push(y[0]),o=o.concat(y);else if("U"==r)o.pop(),o=o.concat(_(u,l,p[1],p[2],p[3])),d=["U"].concat(o[o.length-1].slice(-2));else for(var w=0,S=p.length;S>w;w++)d[w]=p[w];if(r=r.toUpperCase(),"O"!=r)switch(d[0]){case"Z":u=+c,l=+f;break;case"H":u=d[1];break;case"V":l=d[1];break;case"M":c=d[d.length-2],f=d[d.length-1];default:u=d[d.length-2],l=d[d.length-1]}}return o.toString=a,n.abs=s(o),o}function A(t,e,n,r){return[t,e,n,r,n,r]}function F(t,e,n,r,i,o){var a=1/3,s=2/3;return[a*t+s*n,a*e+s*r,a*i+s*n,a*o+s*r,i,o]}function M(e,n,r,i,o,a,s,u,l,c){var f,h=120*z/180,d=z/180*(+o||0),p=[],g=t._.cacher(function(t,e,n){var r=t*R.cos(n)-e*R.sin(n),i=t*R.sin(n)+e*R.cos(n);return{x:r,y:i}});if(c)k=c[0],_=c[1],S=c[2],C=c[3];else{f=g(e,n,-d),e=f.x,n=f.y,f=g(u,l,-d),u=f.x,l=f.y;var v=(R.cos(z/180*o),R.sin(z/180*o),(e-u)/2),m=(n-l)/2,y=v*v/(r*r)+m*m/(i*i);y>1&&(y=R.sqrt(y),r=y*r,i=y*i);var x=r*r,b=i*i,w=(a==s?-1:1)*R.sqrt($((x*b-x*m*m-b*v*v)/(x*m*m+b*v*v))),S=w*r*m/i+(e+u)/2,C=w*-i*v/r+(n+l)/2,k=R.asin(((n-C)/i).toFixed(9)),_=R.asin(((l-C)/i).toFixed(9));k=S>e?z-k:k,_=S>u?z-_:_,0>k&&(k=2*z+k),0>_&&(_=2*z+_),s&&k>_&&(k-=2*z),!s&&_>k&&(_-=2*z)}var B=_-k;if($(B)>h){var T=_,A=u,F=l;_=k+h*(s&&_>k?1:-1),u=S+r*R.cos(_),l=C+i*R.sin(_),p=M(u,l,r,i,o,0,s,A,F,[_,T,S,C])}B=_-k;var N=R.cos(k),j=R.sin(k),P=R.cos(_),L=R.sin(_),q=R.tan(B/4),E=4/3*r*q,V=4/3*i*q,O=[e,n],G=[e+E*j,n-V*N],D=[u+E*L,l-V*P],I=[u,l];if(G[0]=2*O[0]-G[0],G[1]=2*O[1]-G[1],c)return[G,D,I].concat(p);p=[G,D,I].concat(p).join().split(",");for(var U=[],X=0,H=p.length;H>X;X++)U[X]=X%2?g(p[X-1],p[X],d).y:g(p[X],p[X+1],d).x;return U}function N(t,e,n,r,i,o,a,s){for(var u,l,c,f,h,d,p,g,v=[],m=[[],[]],y=0;2>y;++y)if(0==y?(l=6*t-12*n+6*i,u=-3*t+9*n-9*i+3*a,c=3*n-3*t):(l=6*e-12*r+6*o,u=-3*e+9*r-9*o+3*s,c=3*r-3*e),$(u)<1e-12){if($(l)<1e-12)continue;f=-c/l,f>0&&1>f&&v.push(f)}else p=l*l-4*c*u,g=R.sqrt(p),0>p||(h=(-l+g)/(2*u),h>0&&1>h&&v.push(h),d=(-l-g)/(2*u),d>0&&1>d&&v.push(d));for(var x,b=v.length,w=b;b--;)f=v[b],x=1-f,m[0][b]=x*x*x*t+3*x*x*f*n+3*x*f*f*i+f*f*f*a,m[1][b]=x*x*x*e+3*x*x*f*r+3*x*f*f*o+f*f*f*s;return m[0][w]=t,m[1][w]=e,m[0][w+1]=a,m[1][w+1]=s,m[0].length=m[1].length=w+2,{min:{x:I.apply(0,m[0]),y:I.apply(0,m[1])},max:{x:U.apply(0,m[0]),y:U.apply(0,m[1])}}}function j(t,e){var n=!e&&i(t);if(!e&&n.curve)return s(n.curve);for(var r=T(t),o=e&&T(e),a={x:0,y:0,bx:0,by:0,X:0,Y:0,qx:null,qy:null},u={x:0,y:0,bx:0,by:0,X:0,Y:0,qx:null,qy:null},l=(function(t,e,n){var r,i;if(!t)return["C",e.x,e.y,e.x,e.y,e.x,e.y];switch(!(t[0]in{T:1,Q:1})&&(e.qx=e.qy=null),t[0]){case"M":e.X=t[1],e.Y=t[2];break;case"A":t=["C"].concat(M.apply(0,[e.x,e.y].concat(t.slice(1))));break;case"S":"C"==n||"S"==n?(r=2*e.x-e.bx,i=2*e.y-e.by):(r=e.x,i=e.y),t=["C",r,i].concat(t.slice(1));break;case"T":"Q"==n||"T"==n?(e.qx=2*e.x-e.qx,e.qy=2*e.y-e.qy):(e.qx=e.x,e.qy=e.y),t=["C"].concat(F(e.x,e.y,e.qx,e.qy,t[1],t[2]));break;case"Q":e.qx=t[1],e.qy=t[2],t=["C"].concat(F(e.x,e.y,t[1],t[2],t[3],t[4]));break;case"L":t=["C"].concat(A(e.x,e.y,t[1],t[2]));break;case"H":t=["C"].concat(A(e.x,e.y,t[1],e.y));break;case"V":t=["C"].concat(A(e.x,e.y,e.x,t[1]));break;case"Z":t=["C"].concat(A(e.x,e.y,e.X,e.Y))}return t}),c=function(t,e){if(t[e].length>7){t[e].shift();for(var n=t[e];n.length;)h[e]="A",o&&(d[e]="A"),t.splice(e++,0,["C"].concat(n.splice(0,6)));t.splice(e,1),m=U(r.length,o&&o.length||0)}},f=function(t,e,n,i,a){t&&e&&"M"==t[a][0]&&"M"!=e[a][0]&&(e.splice(a,0,["M",i.x,i.y]),n.bx=0,n.by=0,n.x=t[a][1],n.y=t[a][2],m=U(r.length,o&&o.length||0))},h=[],d=[],p="",g="",v=0,m=U(r.length,o&&o.length||0);m>v;v++){r[v]&&(p=r[v][0]),"C"!=p&&(h[v]=p,v&&(g=h[v-1])),r[v]=l(r[v],a,g),"A"!=h[v]&&"C"==p&&(h[v]="C"),c(r,v),o&&(o[v]&&(p=o[v][0]),"C"!=p&&(d[v]=p,v&&(g=d[v-1])),o[v]=l(o[v],u,g),"A"!=d[v]&&"C"==p&&(d[v]="C"),c(o,v)),f(r,o,a,u,v),f(o,r,u,a,v);var y=r[v],x=o&&o[v],b=y.length,w=o&&x.length;a.x=y[b-2],a.y=y[b-1],a.bx=D(y[b-4])||a.x,a.by=D(y[b-3])||a.y,u.bx=o&&(D(x[w-4])||u.x),u.by=o&&(D(x[w-3])||u.y),u.x=o&&x[w-2],u.y=o&&x[w-1]}return o||(n.curve=s(r)),o?[r,o]:r}function P(t,e){if(!e)return t;var n,r,i,o,a,s,u;for(t=j(t),i=0,a=t.length;a>i;i++)for(u=t[i],o=1,s=u.length;s>o;o+=2)n=e.x(u[o],u[o+1]),r=e.y(u[o],u[o+1]),u[o]=n,u[o+1]=r;return t}function L(t,e){for(var n=[],r=0,i=t.length;i-2*!e>r;r+=2){var o=[{x:+t[r-2],y:+t[r-1]},{x:+t[r],y:+t[r+1]},{x:+t[r+2],y:+t[r+3]},{x:+t[r+4],y:+t[r+5]}];e?r?i-4==r?o[3]={x:+t[0],y:+t[1]}:i-2==r&&(o[2]={x:+t[0],y:+t[1]},o[3]={x:+t[2],y:+t[3]}):o[0]={x:+t[i-2],y:+t[i-1]}:i-4==r?o[3]=o[2]:r||(o[0]={x:+t[r],y:+t[r+1]}),n.push(["C",(-o[0].x+6*o[1].x+o[2].x)/6,(-o[0].y+6*o[1].y+o[2].y)/6,(o[1].x+6*o[2].x-o[3].x)/6,(o[1].y+6*o[2].y-o[3].y)/6,o[2].x,o[2].y])}return n}var q=e.prototype,E=t.is,V=t._.clone,O="hasOwnProperty",G=/,?([a-z]),?/gi,D=parseFloat,R=Math,z=R.PI,I=R.min,U=R.max,X=R.pow,$=R.abs,H=l(1),Y=l(),W=l(0,1),Z=t._unit2px,Q={path:function(t){return t.attr("path")},circle:function(t){var e=Z(t);return _(e.cx,e.cy,e.r)},ellipse:function(t){var e=Z(t);return _(e.cx||0,e.cy||0,e.rx,e.ry)},rect:function(t){var e=Z(t);return k(e.x||0,e.y||0,e.width,e.height,e.rx,e.ry)},image:function(t){var e=Z(t);return k(e.x||0,e.y||0,e.width,e.height)},line:function(t){return"M"+[t.attr("x1")||0,t.attr("y1")||0,t.attr("x2"),t.attr("y2")]},polyline:function(t){return"M"+t.attr("points")},polygon:function(t){return"M"+t.attr("points")+"z"},deflt:function(t){var e=t.node.getBBox();return k(e.x,e.y,e.width,e.height)}};t.path=i,t.path.getTotalLength=H,t.path.getPointAtLength=Y,t.path.getSubpath=function(t,e,n){if(this.getTotalLength(t)-n<1e-6)return W(t,e).end;var r=W(t,n,1);return e?W(r,e).end:r},q.getTotalLength=function(){return this.node.getTotalLength?this.node.getTotalLength():void 0},q.getPointAtLength=function(t){return Y(this.attr("d"),t)},q.getSubpath=function(e,n){return t.path.getSubpath(this.attr("d"),e,n)},t._.box=o,t.path.findDotsAtSegment=c,t.path.bezierBBox=f,t.path.isPointInsideBBox=h,t.closest=function(e,n,r,i){for(var a=100,s=o(e-a/2,n-a/2,a,a),u=[],l=r[0].hasOwnProperty("x")?function(t){return{x:r[t].x,y:r[t].y}}:function(t){return{x:r[t],y:i[t]}},c=0;1e6>=a&&!c;){for(var f=0,d=r.length;d>f;f++){var p=l(f);if(h(s,p.x,p.y)){c++,u.push(p);break}}c||(a*=2,s=o(e-a/2,n-a/2,a,a))}if(1e6!=a){var g,v=1/0;for(f=0,d=u.length;d>f;f++){var m=t.len(e,n,u[f].x,u[f].y);v>m&&(v=m,u[f].len=m,g=u[f])}return g}},t.path.isBBoxIntersect=d,t.path.intersection=x,t.path.intersectionNumber=b,t.path.isPointInside=S,t.path.getBBox=C,t.path.get=Q,t.path.toRelative=B,t.path.toAbsolute=T,t.path.toCubic=j,t.path.map=P,t.path.toString=a,t.path.clone=s}),r.plugin(function(t,r,i,o){var a=Math.max,s=Math.min,u=function(t){if(this.items=[],this.bindings={},this.length=0,this.type="set",t)for(var e=0,n=t.length;n>e;e++)t[e]&&(this[this.items.length]=this.items[this.items.length]=t[e],this.length++)},l=u.prototype;l.push=function(){for(var t,e,n=0,r=arguments.length;r>n;n++)t=arguments[n],t&&(e=this.items.length,this[e]=this.items[e]=t,this.length++);return this},l.pop=function(){return this.length&&delete this[this.length--],this.items.pop()},l.forEach=function(t,e){for(var n=0,r=this.items.length;r>n;n++)if(t.call(e,this.items[n],n)===!1)return this;return this},l.animate=function(r,i,o,a){"function"!=typeof o||o.length||(a=o,o=n.linear),r instanceof t._.Animation&&(a=r.callback,o=r.easing,
i=o.dur,r=r.attr);var s=arguments;if(t.is(r,"array")&&t.is(s[s.length-1],"array"))var u=!0;var l,c=function(){l?this.b=l:l=this.b},f=0,h=this,d=a&&function(){++f==h.length&&a.call(this)};return this.forEach(function(t,n){e.once("snap.animcreated."+t.id,c),u?s[n]&&t.animate.apply(t,s[n]):t.animate(r,i,o,d)})},l.remove=function(){for(;this.length;)this.pop().remove();return this},l.bind=function(t,e,n){var r={};if("function"==typeof e)this.bindings[t]=e;else{var i=n||t;this.bindings[t]=function(t){r[i]=t,e.attr(r)}}return this},l.attr=function(t){var e={};for(var n in t)this.bindings[n]?this.bindings[n](t[n]):e[n]=t[n];for(var r=0,i=this.items.length;i>r;r++)this.items[r].attr(e);return this},l.clear=function(){for(;this.length;)this.pop()},l.splice=function(t,e,n){t=0>t?a(this.length+t,0):t,e=a(0,s(this.length-t,e));var r,i=[],o=[],l=[];for(r=2;r<arguments.length;r++)l.push(arguments[r]);for(r=0;e>r;r++)o.push(this[t+r]);for(;r<this.length-t;r++)i.push(this[t+r]);var c=l.length;for(r=0;r<c+i.length;r++)this.items[t+r]=this[t+r]=c>r?l[r]:i[r-c];for(r=this.items.length=this.length-=e-c;this[r];)delete this[r++];return new u(o)},l.exclude=function(t){for(var e=0,n=this.length;n>e;e++)if(this[e]==t)return this.splice(e,1),!0;return!1},l.insertAfter=function(t){for(var e=this.items.length;e--;)this.items[e].insertAfter(t);return this},l.getBBox=function(){for(var t=[],e=[],n=[],r=[],i=this.items.length;i--;)if(!this.items[i].removed){var o=this.items[i].getBBox();t.push(o.x),e.push(o.y),n.push(o.x+o.width),r.push(o.y+o.height)}return t=s.apply(0,t),e=s.apply(0,e),n=a.apply(0,n),r=a.apply(0,r),{x:t,y:e,x2:n,y2:r,width:n-t,height:r-e,cx:t+(n-t)/2,cy:e+(r-e)/2}},l.clone=function(t){t=new u;for(var e=0,n=this.items.length;n>e;e++)t.push(this.items[e].clone());return t},l.toString=function(){return"Snap‘s set"},l.type="set",t.Set=u,t.set=function(){var t=new u;return arguments.length&&t.push.apply(t,Array.prototype.slice.call(arguments,0)),t}}),r.plugin(function(t,n,r,i){function o(t){var e=t[0];switch(e.toLowerCase()){case"t":return[e,0,0];case"m":return[e,1,0,0,1,0,0];case"r":return 4==t.length?[e,0,t[2],t[3]]:[e,0];case"s":return 5==t.length?[e,1,1,t[3],t[4]]:3==t.length?[e,1,1]:[e,1]}}function a(e,n,r){n=m(n).replace(/\.{3}|\u2026/g,e),e=t.parseTransformString(e)||[],n=t.parseTransformString(n)||[];for(var i,a,s,u,l=Math.max(e.length,n.length),c=[],d=[],p=0;l>p;p++){if(s=e[p]||o(n[p]),u=n[p]||o(s),s[0]!=u[0]||"r"==s[0].toLowerCase()&&(s[2]!=u[2]||s[3]!=u[3])||"s"==s[0].toLowerCase()&&(s[3]!=u[3]||s[4]!=u[4])){e=t._.transform2matrix(e,r()),n=t._.transform2matrix(n,r()),c=[["m",e.a,e.b,e.c,e.d,e.e,e.f]],d=[["m",n.a,n.b,n.c,n.d,n.e,n.f]];break}for(c[p]=[],d[p]=[],i=0,a=Math.max(s.length,u.length);a>i;i++)i in s&&(c[p][i]=s[i]),i in u&&(d[p][i]=u[i])}return{from:h(c),to:h(d),f:f(c)}}function s(t){return t}function u(t){return function(e){return+e.toFixed(3)+t}}function l(t){return t.join(" ")}function c(e){return t.rgb(e[0],e[1],e[2])}function f(t){var e,n,r,i,o,a,s=0,u=[];for(e=0,n=t.length;n>e;e++){for(o="[",a=['"'+t[e][0]+'"'],r=1,i=t[e].length;i>r;r++)a[r]="val["+s++ +"]";o+=a+"]",u[e]=o}return Function("val","return Snap.path.toString.call(["+u+"])")}function h(t){for(var e=[],n=0,r=t.length;r>n;n++)for(var i=1,o=t[n].length;o>i;i++)e.push(t[n][i]);return e}function d(t){return isFinite(parseFloat(t))}function p(e,n){return t.is(e,"array")&&t.is(n,"array")?e.toString()==n.toString():!1}var g={},v=/[a-z]+$/i,m=String;g.stroke=g.fill="colour",n.prototype.equal=function(t,n){return e("snap.util.equal",this,t,n).firstDefined()},e.on("snap.util.equal",function(e,n){var r,i,o=m(this.attr(e)||""),y=this;if(d(o)&&d(n))return{from:parseFloat(o),to:parseFloat(n),f:s};if("colour"==g[e])return r=t.color(o),i=t.color(n),{from:[r.r,r.g,r.b,r.opacity],to:[i.r,i.g,i.b,i.opacity],f:c};if("viewBox"==e)return r=this.attr(e).vb.split(" ").map(Number),i=n.split(" ").map(Number),{from:r,to:i,f:l};if("transform"==e||"gradientTransform"==e||"patternTransform"==e)return n instanceof t.Matrix&&(n=n.toTransformString()),t._.rgTransform.test(n)||(n=t._.svgTransform2string(n)),a(o,n,function(){return y.getBBox(1)});if("d"==e||"path"==e)return r=t.path.toCubic(o,n),{from:h(r[0]),to:h(r[1]),f:f(r[0])};if("points"==e)return r=m(o).split(t._.separator),i=m(n).split(t._.separator),{from:r,to:i,f:function(t){return t}};var x=o.match(v),b=m(n).match(v);return x&&p(x,b)?{from:parseFloat(o),to:parseFloat(n),f:u(x)}:{from:this.asPX(e),to:this.asPX(e,n),f:s}})}),r.plugin(function(t,n,r,i){for(var o=n.prototype,a="hasOwnProperty",s=("createTouch"in i.doc),u=["click","dblclick","mousedown","mousemove","mouseout","mouseover","mouseup","touchstart","touchmove","touchend","touchcancel"],l={mousedown:"touchstart",mousemove:"touchmove",mouseup:"touchend"},c=(function(t,e){var n="y"==t?"scrollTop":"scrollLeft",r=e&&e.node?e.node.ownerDocument:i.doc;return r[n in r.documentElement?"documentElement":"body"][n]}),f=function(){return this.originalEvent.preventDefault()},h=function(){return this.originalEvent.stopPropagation()},d=function(t,e,n,r){var i=s&&l[e]?l[e]:e,o=function(i){var o=c("y",r),u=c("x",r);if(s&&l[a](e))for(var d=0,p=i.targetTouches&&i.targetTouches.length;p>d;d++)if(i.targetTouches[d].target==t||t.contains(i.targetTouches[d].target)){var g=i;i=i.targetTouches[d],i.originalEvent=g,i.preventDefault=f,i.stopPropagation=h;break}var v=i.clientX+u,m=i.clientY+o;return n.call(r,i,v,m)};return e!==i&&t.addEventListener(e,o,!1),t.addEventListener(i,o,!1),function(){return e!==i&&t.removeEventListener(e,o,!1),t.removeEventListener(i,o,!1),!0}},p=[],g=function(t){for(var n,r=t.clientX,i=t.clientY,o=c("y"),a=c("x"),u=p.length;u--;){if(n=p[u],s){for(var l,f=t.touches&&t.touches.length;f--;)if(l=t.touches[f],l.identifier==n.el._drag.id||n.el.node.contains(l.target)){r=l.clientX,i=l.clientY,(t.originalEvent?t.originalEvent:t).preventDefault();break}}else t.preventDefault();var h=n.el.node;h.nextSibling,h.parentNode,h.style.display;r+=a,i+=o,e("snap.drag.move."+n.el.id,n.move_scope||n.el,r-n.el._drag.x,i-n.el._drag.y,r,i,t)}},v=function(n){t.unmousemove(g).unmouseup(v);for(var r,i=p.length;i--;)r=p[i],r.el._drag={},e("snap.drag.end."+r.el.id,r.end_scope||r.start_scope||r.move_scope||r.el,n),e.off("snap.drag.*."+r.el.id);p=[]},m=u.length;m--;)!function(e){t[e]=o[e]=function(n,r){if(t.is(n,"function"))this.events=this.events||[],this.events.push({name:e,f:n,unbind:d(this.node||document,e,n,r||this)});else for(var i=0,o=this.events.length;o>i;i++)if(this.events[i].name==e)try{this.events[i].f.call(this)}catch(a){}return this},t["un"+e]=o["un"+e]=function(t){for(var n=this.events||[],r=n.length;r--;)if(n[r].name==e&&(n[r].f==t||!t))return n[r].unbind(),n.splice(r,1),!n.length&&delete this.events,this;return this}}(u[m]);o.hover=function(t,e,n,r){return this.mouseover(t,n).mouseout(e,r||n)},o.unhover=function(t,e){return this.unmouseover(t).unmouseout(e)};var y=[];o.drag=function(n,r,i,o,a,s){function u(u,l,f){(u.originalEvent||u).preventDefault(),c._drag.x=l,c._drag.y=f,c._drag.id=u.identifier,!p.length&&t.mousemove(g).mouseup(v),p.push({el:c,move_scope:o,start_scope:a,end_scope:s}),r&&e.on("snap.drag.start."+c.id,r),n&&e.on("snap.drag.move."+c.id,n),i&&e.on("snap.drag.end."+c.id,i),e("snap.drag.start."+c.id,a||o||c,l,f,u)}function l(t,n,r){e("snap.draginit."+c.id,c,t,n,r)}var c=this;if(!arguments.length){var f;return c.drag(function(t,e){this.attr({transform:f+(f?"T":"t")+[t,e]})},function(){f=this.transform().local})}return e.on("snap.draginit."+c.id,u),c._drag={},y.push({el:c,start:u,init:l}),c.mousedown(l),c},o.undrag=function(){for(var n=y.length;n--;)y[n].el==this&&(this.unmousedown(y[n].init),y.splice(n,1),e.unbind("snap.drag.*."+this.id),e.unbind("snap.draginit."+this.id));return!y.length&&t.unmousemove(g).unmouseup(v),this}}),r.plugin(function(t,n,r,i){var o=(n.prototype,r.prototype),a=/^\s*url\((.+)\)/,s=String,u=t._.$;t.filter={},o.filter=function(e){var r=this;"svg"!=r.type&&(r=r.paper);var i=t.parse(s(e)),o=t._.id(),a=(r.node.offsetWidth,r.node.offsetHeight,u("filter"));return u(a,{id:o,filterUnits:"userSpaceOnUse"}),a.appendChild(i.node),r.defs.appendChild(a),new n(a)},e.on("snap.util.getattr.filter",function(){e.stop();var n=u(this.node,"filter");if(n){var r=s(n).match(a);return r&&t.select(r[1])}}),e.on("snap.util.attr.filter",function(r){if(r instanceof n&&"filter"==r.type){e.stop();var i=r.node.id;i||(u(r.node,{id:r.id}),i=r.id),u(this.node,{filter:t.url(i)})}r&&"none"!=r||(e.stop(),this.node.removeAttribute("filter"))}),t.filter.blur=function(e,n){null==e&&(e=2);var r=null==n?e:[e,n];return t.format('<feGaussianBlur stdDeviation="{def}"/>',{def:r})},t.filter.blur.toString=function(){return this()},t.filter.shadow=function(e,n,r,i,o){return"string"==typeof r&&(i=r,o=i,r=4),"string"!=typeof i&&(o=i,i="#000"),i=i||"#000",null==r&&(r=4),null==o&&(o=1),null==e&&(e=0,n=2),null==n&&(n=e),i=t.color(i),t.format('<feGaussianBlur in="SourceAlpha" stdDeviation="{blur}"/><feOffset dx="{dx}" dy="{dy}" result="offsetblur"/><feFlood flood-color="{color}"/><feComposite in2="offsetblur" operator="in"/><feComponentTransfer><feFuncA type="linear" slope="{opacity}"/></feComponentTransfer><feMerge><feMergeNode/><feMergeNode in="SourceGraphic"/></feMerge>',{color:i,dx:e,dy:n,blur:r,opacity:o})},t.filter.shadow.toString=function(){return this()},t.filter.grayscale=function(e){return null==e&&(e=1),t.format('<feColorMatrix type="matrix" values="{a} {b} {c} 0 0 {d} {e} {f} 0 0 {g} {b} {h} 0 0 0 0 0 1 0"/>',{a:.2126+.7874*(1-e),b:.7152-.7152*(1-e),c:.0722-.0722*(1-e),d:.2126-.2126*(1-e),e:.7152+.2848*(1-e),f:.0722-.0722*(1-e),g:.2126-.2126*(1-e),h:.0722+.9278*(1-e)})},t.filter.grayscale.toString=function(){return this()},t.filter.sepia=function(e){return null==e&&(e=1),t.format('<feColorMatrix type="matrix" values="{a} {b} {c} 0 0 {d} {e} {f} 0 0 {g} {h} {i} 0 0 0 0 0 1 0"/>',{a:.393+.607*(1-e),b:.769-.769*(1-e),c:.189-.189*(1-e),d:.349-.349*(1-e),e:.686+.314*(1-e),f:.168-.168*(1-e),g:.272-.272*(1-e),h:.534-.534*(1-e),i:.131+.869*(1-e)})},t.filter.sepia.toString=function(){return this()},t.filter.saturate=function(e){return null==e&&(e=1),t.format('<feColorMatrix type="saturate" values="{amount}"/>',{amount:1-e})},t.filter.saturate.toString=function(){return this()},t.filter.hueRotate=function(e){return e=e||0,t.format('<feColorMatrix type="hueRotate" values="{angle}"/>',{angle:e})},t.filter.hueRotate.toString=function(){return this()},t.filter.invert=function(e){return null==e&&(e=1),t.format('<feComponentTransfer><feFuncR type="table" tableValues="{amount} {amount2}"/><feFuncG type="table" tableValues="{amount} {amount2}"/><feFuncB type="table" tableValues="{amount} {amount2}"/></feComponentTransfer>',{amount:e,amount2:1-e})},t.filter.invert.toString=function(){return this()},t.filter.brightness=function(e){return null==e&&(e=1),t.format('<feComponentTransfer><feFuncR type="linear" slope="{amount}"/><feFuncG type="linear" slope="{amount}"/><feFuncB type="linear" slope="{amount}"/></feComponentTransfer>',{amount:e})},t.filter.brightness.toString=function(){return this()},t.filter.contrast=function(e){return null==e&&(e=1),t.format('<feComponentTransfer><feFuncR type="linear" slope="{amount}" intercept="{amount2}"/><feFuncG type="linear" slope="{amount}" intercept="{amount2}"/><feFuncB type="linear" slope="{amount}" intercept="{amount2}"/></feComponentTransfer>',{amount:e,amount2:.5-e/2})},t.filter.contrast.toString=function(){return this()}}),r.plugin(function(t,e,n,r,i){var o=t._.box,a=t.is,s=/^[^a-z]*([tbmlrc])/i,u=function(){return"T"+this.dx+","+this.dy};e.prototype.getAlign=function(t,e){null==e&&a(t,"string")&&(e=t,t=null),t=t||this.paper;var n=t.getBBox?t.getBBox():o(t),r=this.getBBox(),i={};switch(e=e&&e.match(s),e=e?e[1].toLowerCase():"c"){case"t":i.dx=0,i.dy=n.y-r.y;break;case"b":i.dx=0,i.dy=n.y2-r.y2;break;case"m":i.dx=0,i.dy=n.cy-r.cy;break;case"l":i.dx=n.x-r.x,i.dy=0;break;case"r":i.dx=n.x2-r.x2,i.dy=0;break;default:i.dx=n.cx-r.cx,i.dy=0}return i.toString=u,i},e.prototype.align=function(t,e){return this.transform("..."+this.getAlign(t,e))}}),r});
//# sourceMappingURL=data:application/json;base64,